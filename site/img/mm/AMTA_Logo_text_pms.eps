%!PS-Adobe-3.1 EPSF-3.0%%Title: AMTA Logo text_pms.eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Liz Loosmore%%CreationDate: 3/9/07%%BoundingBox: 0 0 169 217%%HiResBoundingBox: 0 0 168.2847 216.3477%%CropBox: 0 0 168.2847 216.3477%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: (PANTONE 2945 CVC)%%+ (PANTONE 298 CVC)%%CMYKCustomColor: 1 0.3800 0 0.1500 (PANTONE 2945 CVC)%%+ 0.7600 0.0850 0 0 (PANTONE 298 CVC)%%RGBCustomColor: %ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (AMTA Logo text_pms.eps) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
  <xap:CreateDate>2007-09-03T11:19:01+10:00</xap:CreateDate>
  <xap:ModifyDate>2007-09-03T01:29:59Z</xap:ModifyDate>
  <xap:MetadataDate>2007-09-03T11:19:01+10:00</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>200</xapGImg:width>
     <xapGImg:height>256</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADIAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8ANLn/AHpl/wBdv151EeTw&#xA;U+ZU8LF2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVPPI/8Aylul/wDG&#xA;cfqOUar+7l7nM7P/AL+PvSe5/wB6Zf8AXb9eXR5OLPmVPCxdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVTzyP8A8pbpf/GcfqOUar+7l7nM7P8A7+PvSe5/3pl/12/Xl0eT&#xA;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</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:stRef='http://ns.adobe.com/xap/1.0/sType/ResourceRef#'
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:DocumentID>uuid:6B68C08AA15BDC11BFE2D27006BF2176</xapMM:DocumentID>
  <xapMM:InstanceID>uuid:6C68C08AA15BDC11BFE2D27006BF2176</xapMM:InstanceID>
  <xapMM:DerivedFrom rdf:parseType='Resource'>
   <stRef:instanceID>uuid:2718B859587711DC92F8EABB41AAC548</stRef:instanceID>
   <stRef:documentID>uuid:2718B858587711DC92F8EABB41AAC548</stRef:documentID>
  </xapMM:DerivedFrom>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:stDim='http://ns.adobe.com/xap/1.0/sType/Dimensions#'
  xmlns:xapG='http://ns.adobe.com/xap/1.0/g/'
  xmlns:xapTPg='http://ns.adobe.com/xap/1.0/t/pg/'>
  <xapTPg:MaxPageSize rdf:parseType='Resource'>
   <stDim:w>209.999994</stDim:w>
   <stDim:h>297.000024</stDim:h>
   <stDim:unit>Millimeters</stDim:unit>
  </xapTPg:MaxPageSize>
  <xapTPg:NPages>1</xapTPg:NPages>
  <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
  <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
  <xapTPg:PlateNames>
   <rdf:Seq>
    <rdf:li>Black</rdf:li>
    <rdf:li>PANTONE 298 CVC</rdf:li>
    <rdf:li>PANTONE 2945 CVC</rdf:li>
   </rdf:Seq>
  </xapTPg:PlateNames>
  <xapTPg:SwatchGroups>
   <rdf:Seq>
    <rdf:li rdf:parseType='Resource'>
     <xapG:groupName>Default Swatch Group</xapG:groupName>
     <xapG:groupType>0</xapG:groupType>
     <xapG:Colorants>
      <rdf:Seq>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>K=100</xapG:swatchName>
        <xapG:mode>GRAY</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:gray>255</xapG:gray>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=0 Y=0 K=100</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>0.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>100.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=10 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>10.000002</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=50 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>0.000000</xapG:cyan>
        <xapG:magenta>50.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=100 M=55 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>55.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=100 M=90 Y=10 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>90.000000</xapG:magenta>
        <xapG:yellow>10.000002</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=15 M=100 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>14.999998</xapG:cyan>
        <xapG:magenta>100.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=45 M=90 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>45.000000</xapG:cyan>
        <xapG:magenta>90.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=40 Y=30 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>39.999996</xapG:magenta>
        <xapG:yellow>30.000002</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=50 M=85 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>50.000000</xapG:cyan>
        <xapG:magenta>85.000000</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=75 M=5 Y=100 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>75.000000</xapG:cyan>
        <xapG:magenta>5.000001</xapG:magenta>
        <xapG:yellow>100.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=75 M=90 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>75.000000</xapG:cyan>
        <xapG:magenta>90.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>C=80 M=5 Y=0 K=0</xapG:swatchName>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:type>PROCESS</xapG:type>
        <xapG:cyan>80.000000</xapG:cyan>
        <xapG:magenta>5.000001</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>PANTONE 298 CVC</xapG:swatchName>
        <xapG:type>SPOT</xapG:type>
        <xapG:tint>100.000000</xapG:tint>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:cyan>76.000000</xapG:cyan>
        <xapG:magenta>8.500000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>0.000000</xapG:black>
       </rdf:li>
       <rdf:li rdf:parseType='Resource'>
        <xapG:swatchName>PANTONE 2945 CVC</xapG:swatchName>
        <xapG:type>SPOT</xapG:type>
        <xapG:tint>100.000000</xapG:tint>
        <xapG:mode>CMYK</xapG:mode>
        <xapG:cyan>100.000000</xapG:cyan>
        <xapG:magenta>38.000000</xapG:magenta>
        <xapG:yellow>0.000000</xapG:yellow>
        <xapG:black>14.999999</xapG:black>
       </rdf:li>
      </rdf:Seq>
     </xapG:Colorants>
    </rdf:li>
   </rdf:Seq>
  </xapTPg:SwatchGroups>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -216.348 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 216.348 li168.285 216.348 li168.285 0 liclp[1 0 0 1 0 0 ] concat20.3653 108.999 mo17.7559 108.999 17.2593 108.999 15.023 109.124 cv15.9546 107.073 16.1412 106.825 17.1968 104.216 cv18.3775 101.358 li19.8682 97.6929 20.2408 96.6988 21.4209 93.1582 cv21.6075 93.1582 li22.7256 96.6988 23.0362 97.5684 24.5269 101.358 cv25.7071 104.34 li26.6392 106.701 26.8873 107.135 27.8194 109.124 cv25.5831 108.999 25.148 108.999 22.5391 108.999 cv20.3653 108.999 licp34.0933 125.398 mo42.1685 125.398 li24.9 83.9644 li18.75 83.9644 li1.29444 125.398 li8.62452 125.398 li13.0972 114.34 li29.6832 114.34 li34.0933 125.398 litrue sop/0 [/DeviceCMYK] add_csa0 0 0 1 cmykef90.191 84.648 mo84.2271 84.648 li74.2881 106.576 li72.4244 110.676 72.0518 111.608 70.6851 115.397 cv70.4986 115.397 li69.0699 111.545 68.6973 110.614 66.8335 106.576 cv56.8326 84.648 li50.6207 84.648 li45.1543 125.398 li51.8633 125.398 li53.6646 111.111 li54.4722 104.899 54.5342 103.346 54.8448 97.4444 cv55.0933 97.3824 li57.1431 102.911 57.7642 104.34 60.3736 110.055 cv67.4551 125.398 li72.3003 125.398 li79.5059 109.806 li82.1773 103.967 82.7359 102.601 84.7862 97.0718 cv85.0347 97.1338 li85.3453 103.036 85.4078 104.464 86.2144 110.862 cv88.0162 125.398 li95.4703 125.398 li90.191 84.648 lief97.775 84.648 mo97.775 90.9219 li109.64 90.9219 li110.322 90.9219 110.447 90.9219 111.068 90.7354 cv110.882 91.3565 110.882 91.481 110.882 92.1641 cv110.882 125.398 li118.461 125.398 li118.461 92.1641 li118.461 91.481 118.461 91.3565 118.273 90.7354 cv118.896 90.9219 119.02 90.9219 119.703 90.9219 cv131.63 90.9219 li131.63 84.648 li97.775 84.648 lief145.044 108.999 mo142.436 108.999 141.938 108.999 139.702 109.124 cv140.634 107.073 140.82 106.825 141.876 104.216 cv143.057 101.358 li144.547 97.6929 144.92 96.6988 146.1 93.1582 cv146.287 93.1582 li147.404 96.6988 147.715 97.5684 149.206 101.358 cv150.387 104.34 li151.318 106.701 151.566 107.135 152.498 109.124 cv150.262 108.999 149.827 108.999 147.219 108.999 cv145.044 108.999 licp158.772 125.398 mo166.848 125.398 li149.578 83.9644 li143.43 83.9644 li125.974 125.398 li133.304 125.398 li137.776 114.34 li154.361 114.34 li158.772 125.398 lief0.393067 0 mo167.569 0 li167.569 67.3594 li152.139 60.711 142.52 58.3062 125.775 56.9107 cv92.2886 54.1202 75.6739 80.5982 42.1871 77.8077 cv25.4439 76.4126 15.8233 74.0074 0.393067 67.3594 cv0.393067 0 lifalse sop/0 <</Name (PANTONE 298 CVC)/CSA /0 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /Components [ 0.76 0.085 0 0 ] >>add_csd1 /0 get_csdsepcs1 sepef0.394532 133.739 mo167.568 133.739 li167.568 144.883 li0.394532 144.883 li0.394532 133.739 li/1 <</Name (PANTONE 2945 CVC)/CSA /0 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /Components [ 1 0.38 0 0.15 ] >>add_csd1 /1 get_csdsepcs1 sepef6.96436 210.862 mo6.14405 210.862 5.98829 210.862 5.28516 210.901 cv5.57813 210.257 5.63672 210.178 5.96827 209.358 cv6.33936 208.46 li6.80811 207.308 6.9253 206.996 7.29639 205.882 cv7.3545 205.882 li7.70655 206.996 7.80372 207.268 8.27247 208.46 cv8.64356 209.398 li8.93604 210.139 9.01416 210.276 9.30713 210.901 cv8.6045 210.862 8.46729 210.862 7.64747 210.862 cv6.96436 210.862 licp11.2793 216.016 mo13.8174 216.016 li8.38965 202.993 li6.45655 202.993 li0.970215 216.016 li3.27442 216.016 li4.67969 212.541 li9.89307 212.541 li11.2793 216.016 litrue sop0 0 0 1 cmykef20.8668 207.757 mo19.8711 207.23 19.0318 206.996 18.0357 206.996 cv16.0445 206.996 14.775 208.07 14.775 209.709 cv14.775 211.076 15.3809 211.701 17.587 212.58 cv18.4454 212.912 18.7188 213.166 18.7188 213.654 cv18.7188 214.2 18.1138 214.649 17.3721 214.649 cv16.669 214.649 15.9073 214.317 15.107 213.654 cv14.2286 215.099 li15.0484 215.899 16.2002 216.348 17.5084 216.348 cv19.6563 216.348 21.0816 215.235 21.0816 213.556 cv21.0816 212.423 20.5152 211.604 19.4024 211.155 cv18.1529 210.647 li17.313 210.294 17.001 210.022 17.001 209.611 cv17.001 209.085 17.5279 208.656 18.1724 208.656 cv18.8365 208.656 19.3633 208.832 20.2032 209.338 cv20.8668 207.757 lief28.6563 207.757 mo27.6607 207.23 26.8208 206.996 25.8252 206.996 cv23.834 206.996 22.565 208.07 22.565 209.709 cv22.565 211.076 23.17 211.701 25.376 212.58 cv26.2354 212.912 26.5088 213.166 26.5088 213.654 cv26.5088 214.2 25.9034 214.649 25.1612 214.649 cv24.4585 214.649 23.6973 214.317 22.8965 213.654 cv22.0181 215.099 li22.8379 215.899 23.9898 216.348 25.2984 216.348 cv27.4458 216.348 28.8711 215.235 28.8711 213.556 cv28.8711 212.423 28.3052 211.604 27.1924 211.155 cv25.9424 210.647 li25.1036 210.294 24.7906 210.022 24.7906 209.611 cv24.7906 209.085 25.3179 208.656 25.9625 208.656 cv26.626 208.656 27.1534 208.832 27.9927 209.338 cv28.6563 207.757 lief34.8062 208.773 mo36.2315 208.773 37.2857 210.081 37.2857 211.857 cv37.2857 213.478 36.4078 214.552 35.0601 214.552 cv33.5762 214.552 32.5025 213.206 32.5025 211.37 cv32.5025 209.827 33.44 208.773 34.8062 208.773 cvcp35.0411 206.957 mo32.2291 206.957 30.2178 208.949 30.2178 211.701 cv30.2178 214.396 32.1314 216.29 34.8843 216.29 cv37.6177 216.29 39.5704 214.336 39.5704 211.624 cv39.5704 208.968 37.6177 206.957 35.0411 206.957 cvef48.4507 207.875 mo47.5718 207.25 46.6539 206.957 45.6197 206.957 cv42.9834 206.957 40.9922 209.026 40.9922 211.721 cv40.9922 214.376 42.8277 216.29 45.3848 216.29 cv46.5958 216.29 47.6109 215.958 48.5284 215.254 cv47.7872 213.731 li47.0254 214.181 46.4981 214.336 45.8536 214.336 cv44.3116 214.336 43.296 213.185 43.296 211.467 cv43.296 209.964 44.292 208.85 45.6387 208.85 cv46.3028 208.85 46.7715 209.006 47.5333 209.514 cv48.4507 207.875 lief52.1578 207.25 mo49.9122 207.25 li49.9122 216.016 li52.1578 216.016 li52.1578 207.25 licp51.1031 203.248 mo50.3423 203.248 49.7955 203.794 49.7955 204.536 cv49.7955 205.297 50.3423 205.844 51.1031 205.844 cv51.8453 205.844 52.3921 205.297 52.3921 204.536 cv52.3921 203.794 51.8453 203.248 51.1031 203.248 cvef59.1646 214.141 mo58.4234 214.59 57.9346 214.766 57.4468 214.766 cv56.6851 214.766 56.1578 214.278 56.1578 213.575 cv56.1578 212.501 57.0367 211.974 59.2427 211.701 cv59.1646 212.013 59.1646 212.091 59.1646 212.463 cv59.1646 214.141 licp54.6744 209.631 mo55.9429 208.968 56.7632 208.713 57.5835 208.713 cv58.5401 208.713 59.1646 209.241 59.1646 210.06 cv59.1646 210.198 li59.1646 210.294 59.1841 210.353 59.2427 210.491 cv58.4034 210.569 57.6617 210.667 56.9781 210.803 cv55.0059 211.232 54.0298 212.169 54.0298 213.635 cv54.0298 215.274 55.045 216.29 56.7046 216.29 cv57.6617 216.29 58.2471 216.055 59.4576 215.176 cv59.6329 215.899 60.2584 216.27 61.293 216.27 cv61.5665 216.27 61.8003 216.25 62.25 216.153 cv62.543 214.766 li62.4839 214.787 62.4449 214.787 62.4253 214.787 cv62.1329 214.805 61.7813 214.708 61.625 214.532 cv61.4102 214.317 61.3711 214.084 61.3711 212.99 cv61.3711 210.413 li61.3711 209.202 61.1563 208.42 60.7076 207.953 cv60.1216 207.347 59.2037 207.015 58.0713 207.015 cv56.9781 207.015 55.8458 207.328 54.6744 207.953 cv54.6744 209.631 lief69.4097 207.25 mo67.3404 207.25 li67.1255 207.25 67.0865 207.25 66.8912 207.308 cv66.9498 207.112 66.9498 207.074 66.9498 206.859 cv66.9498 204.692 li65.8174 204.692 li65.4073 206.898 64.9581 207.347 62.9668 207.484 cv62.9668 208.889 li64.3335 208.889 li64.5484 208.889 64.5874 208.889 64.7823 208.832 cv64.7242 209.026 64.7242 209.065 64.7242 209.281 cv64.7242 212.814 li64.7242 213.537 li64.7242 215.274 65.6612 216.192 67.3794 216.192 cv68.4141 216.192 69.2344 215.998 70.0738 215.528 cv69.7418 214.063 li69.0196 214.357 68.6294 214.454 68.1797 214.454 cv67.2427 214.454 66.9498 214.044 66.9498 212.696 cv66.9498 209.281 li66.9498 209.065 66.9498 209.026 66.8912 208.832 cv67.0865 208.889 67.1255 208.889 67.3404 208.889 cv69.4097 208.889 li69.4097 207.25 lief73.6075 207.25 mo71.3619 207.25 li71.3619 216.016 li73.6075 216.016 li73.6075 207.25 licp72.5528 203.248 mo71.7916 203.248 71.2447 203.794 71.2447 204.536 cv71.2447 205.297 71.7916 205.844 72.5528 205.844 cv73.2945 205.844 73.8414 205.297 73.8414 204.536 cv73.8414 203.794 73.2945 203.248 72.5528 203.248 cvef80.1656 208.773 mo81.5904 208.773 82.6451 210.081 82.6451 211.857 cv82.6451 213.478 81.7666 214.552 80.419 214.552 cv78.9351 214.552 77.8619 213.206 77.8619 211.37 cv77.8619 209.827 78.7989 208.773 80.1656 208.773 cvcp80.4 206.957 mo77.5879 206.957 75.5767 208.949 75.5767 211.701 cv75.5767 214.396 77.4903 216.29 80.2432 216.29 cv82.9771 216.29 84.9292 214.336 84.9292 211.624 cv84.9292 208.968 82.9771 206.957 80.4 206.957 cvef86.3707 207.582 mo86.8589 208.168 86.9566 208.674 86.9566 210.725 cv86.9566 216.016 li89.2027 216.016 li89.2027 210.002 li89.9048 209.182 90.5093 208.85 91.2906 208.85 cv92.3453 208.85 92.8335 209.514 92.8335 210.94 cv92.8335 216.016 li95.0787 216.016 li95.0787 210.178 li95.0787 208.265 93.8677 206.975 92.1109 206.975 cv90.9195 206.975 89.982 207.465 89.065 208.538 cv89.0259 208.518 li88.9087 207.699 88.7134 207.23 88.3423 206.975 cv86.3707 207.582 lief104.927 164.163 mo103.053 164.163 li99.9273 171.056 li99.3414 172.343 99.2252 172.636 98.7955 173.828 cv98.7369 173.828 li98.2876 172.618 98.1705 172.324 97.5855 171.056 cv94.441 164.163 li92.4888 164.163 li90.771 176.971 li92.8794 176.971 li93.4449 172.481 li93.6998 170.528 93.7183 170.041 93.816 168.184 cv93.8951 168.166 li94.5386 169.903 94.7339 170.352 95.5542 172.148 cv97.7798 176.971 li99.3023 176.971 li101.568 172.071 li102.408 170.235 102.584 169.805 103.228 168.068 cv103.307 168.088 li103.404 169.942 103.423 170.391 103.677 172.403 cv104.243 176.971 li106.586 176.971 li104.927 164.163 lief112.776 169.728 mo114.201 169.728 115.256 171.037 115.256 172.813 cv115.256 174.433 114.377 175.507 113.03 175.507 cv111.547 175.507 110.473 174.16 110.473 172.324 cv110.473 170.782 111.41 169.728 112.776 169.728 cvcp113.011 167.912 mo110.199 167.912 108.188 169.903 108.188 172.657 cv108.188 175.35 110.102 177.245 112.854 177.245 cv115.588 177.245 117.541 175.293 117.541 172.578 cv117.541 169.923 115.588 167.912 113.011 167.912 cvef121.734 171.583 mo121.734 171.016 121.734 170.899 121.656 170.412 cv122.262 170.041 122.633 169.923 123.238 169.923 cv124.741 169.923 125.737 171.075 125.737 172.773 cv125.737 174.433 124.741 175.527 123.238 175.527 cv122.672 175.527 122.262 175.409 121.656 175.057 cv121.734 174.589 121.734 174.511 121.734 173.924 cv121.734 171.583 licp119.489 163.402 mo119.489 176.249 li121.051 177.03 121.871 177.245 123.141 177.245 cv126.089 177.245 128.042 175.35 128.042 172.5 cv128.042 169.981 126.284 168.009 124.039 168.009 cv123.316 168.009 122.633 168.224 121.676 168.77 cv121.734 167.815 121.734 167.502 121.734 166.544 cv121.734 163.402 li119.489 163.402 lief132.215 168.205 mo129.971 168.205 li129.971 176.971 li132.215 176.971 li132.215 168.205 licp131.162 164.202 mo130.4 164.202 129.854 164.749 129.854 165.491 cv129.854 166.252 130.4 166.798 131.162 166.798 cv131.903 166.798 132.45 166.252 132.45 165.491 cv132.45 164.749 131.903 164.202 131.162 164.202 cvef134.713 163.402 mo134.713 176.971 li136.958 176.971 li136.958 163.402 li134.713 163.402 lief141.935 171.504 mo141.563 171.504 141.485 171.504 141.173 171.583 cv141.31 170.294 142.091 169.512 143.262 169.512 cv144.434 169.512 145.234 170.352 145.234 171.583 cv145.078 171.504 145.039 171.504 144.863 171.504 cv141.935 171.504 licp146.288 172.89 mo147.187 171.718 li147.187 171.641 147.187 171.563 147.187 171.563 cv147.187 169.454 145.585 167.931 143.398 167.931 cv140.821 167.931 138.908 169.942 138.908 172.657 cv138.908 175.332 140.764 177.264 143.34 177.264 cv144.922 177.264 146.133 176.777 147.187 175.703 cv146.405 174.511 li145.625 175.096 144.785 175.389 143.867 175.389 cv142.363 175.389 141.31 174.354 141.192 172.813 cv141.427 172.89 141.485 172.89 141.778 172.89 cv146.288 172.89 lief0 183.683 mo0 185.656 li3.72901 185.656 li3.94385 185.656 3.98292 185.656 4.17823 185.596 cv4.11963 185.791 4.11963 185.831 4.11963 186.045 cv4.11963 196.491 li6.50196 196.491 li6.50196 186.045 li6.50196 185.831 6.50196 185.791 6.44288 185.596 cv6.63819 185.656 6.67774 185.656 6.8921 185.656 cv10.6407 185.656 li10.6407 183.683 li0 183.683 lief12.5142 191.025 mo12.1436 191.025 12.065 191.025 11.7525 191.103 cv11.8897 189.815 12.67 189.032 13.8418 189.032 cv15.0132 189.032 15.814 189.873 15.814 191.103 cv15.6573 191.025 15.6187 191.025 15.4429 191.025 cv12.5142 191.025 licp16.8677 192.411 mo17.7662 191.239 li17.7662 191.162 17.7662 191.083 17.7662 191.083 cv17.7662 188.974 16.1651 187.452 13.9786 187.452 cv11.4014 187.452 9.48731 189.461 9.48731 192.177 cv9.48731 194.851 11.3423 196.784 13.92 196.784 cv15.501 196.784 16.712 196.296 17.7662 195.222 cv16.9854 194.032 li16.2042 194.616 15.3648 194.91 14.4473 194.91 cv12.9439 194.91 11.8897 193.875 11.772 192.333 cv12.0064 192.411 12.065 192.411 12.358 192.411 cv16.8677 192.411 lief19.5811 182.922 mo19.5811 196.491 li21.8267 196.491 li21.8267 182.922 li19.5811 182.922 lief26.8028 191.025 mo26.4322 191.025 26.3541 191.025 26.0416 191.103 cv26.1783 189.815 26.9595 189.032 28.1304 189.032 cv29.3018 189.032 30.1026 189.873 30.1026 191.103 cv29.9468 191.025 29.9078 191.025 29.732 191.025 cv26.8028 191.025 licp31.1568 192.411 mo32.0552 191.239 li32.0552 191.162 32.0552 191.083 32.0552 191.083 cv32.0552 188.974 30.4542 187.452 28.2671 187.452 cv25.69 187.452 23.7764 189.461 23.7764 192.177 cv23.7764 194.851 25.6314 196.784 28.209 196.784 cv29.7901 196.784 31.001 196.296 32.0552 195.222 cv31.2745 194.032 li30.4932 194.616 29.6539 194.91 28.7359 194.91 cv27.2325 194.91 26.1783 193.875 26.0606 192.333 cv26.295 192.411 26.3541 192.411 26.647 192.411 cv31.1568 192.411 lief40.8013 188.35 mo39.9229 187.724 39.0044 187.432 37.9698 187.432 cv35.334 187.432 33.3433 189.501 33.3433 192.196 cv33.3433 194.851 35.1778 196.765 37.7359 196.765 cv38.9468 196.765 39.962 196.433 40.8794 195.73 cv40.1377 194.207 li39.3765 194.656 38.8487 194.813 38.2051 194.813 cv36.6617 194.813 35.647 193.661 35.647 191.942 cv35.647 190.438 36.6426 189.325 37.9903 189.325 cv38.6539 189.325 39.1221 189.482 39.8834 189.99 cv40.8013 188.35 lief46.1485 189.248 mo47.5738 189.248 48.6285 190.557 48.6285 192.333 cv48.6285 193.954 47.7496 195.027 46.4029 195.027 cv44.919 195.027 43.8458 193.68 43.8458 191.844 cv43.8458 190.302 44.7823 189.248 46.1485 189.248 cvcp46.3834 187.432 mo43.5718 187.432 41.5601 189.423 41.5601 192.177 cv41.5601 194.871 43.4737 196.765 46.2271 196.765 cv48.9605 196.765 50.9131 194.813 50.9131 192.098 cv50.9131 189.442 48.9605 187.432 46.3834 187.432 cvef52.9791 196.491 mo55.2247 196.491 li55.2247 190.517 li55.8301 189.677 56.4351 189.325 57.2549 189.325 cv58.3292 189.325 58.7193 189.853 58.7193 191.298 cv58.7193 196.491 li60.9654 196.491 li60.9654 190.517 li61.628 189.638 62.1749 189.306 62.9361 189.306 cv64.108 189.306 64.4595 189.754 64.4595 191.278 cv64.4595 196.491 li66.7051 196.491 li66.7051 190.576 li66.7051 189.619 66.5494 188.974 66.1968 188.506 cv65.709 187.861 64.7129 187.432 63.7374 187.432 cv62.5259 187.432 61.7066 187.861 60.6329 189.072 cv60.5738 189.072 li60.086 187.959 59.2657 187.452 57.9966 187.452 cv56.8838 187.452 55.771 188.037 55.0879 189.012 cv55.0284 188.994 li54.9512 188.271 54.7164 187.705 54.3653 187.452 cv52.3936 188.057 li52.8819 188.643 52.9791 189.169 52.9791 191.2 cv52.9791 196.491 lief69.1812 196.491 mo71.4268 196.491 li71.4268 190.517 li72.0323 189.677 72.6373 189.325 73.4581 189.325 cv74.5313 189.325 74.9214 189.853 74.9214 191.298 cv74.9214 196.491 li77.1675 196.491 li77.1675 190.517 li77.8311 189.638 78.377 189.306 79.1387 189.306 cv80.3101 189.306 80.6626 189.754 80.6626 191.278 cv80.6626 196.491 li82.9073 196.491 li82.9073 190.576 li82.9073 189.619 82.7515 188.974 82.3995 188.506 cv81.9112 187.861 80.9156 187.432 79.94 187.432 cv78.7291 187.432 77.9087 187.861 76.8355 189.072 cv76.7759 189.072 li76.2881 187.959 75.4678 187.452 74.1998 187.452 cv73.086 187.452 71.9732 188.037 71.2901 189.012 cv71.2315 188.994 li71.1539 188.271 70.9195 187.705 70.5674 187.452 cv68.5958 188.057 li69.084 188.643 69.1812 189.169 69.1812 191.2 cv69.1812 196.491 lief85.1685 187.724 mo85.1685 193.132 li85.1685 194.265 85.2671 194.871 85.5601 195.418 cv86.0084 196.237 87.063 196.765 88.1958 196.765 cv89.3082 196.765 90.0894 196.393 91.066 195.399 cv91.1441 195.418 li91.3785 196.354 91.9244 196.746 93.0376 196.746 cv93.3121 196.746 93.5445 196.726 93.9937 196.627 cv94.2876 195.242 li94.2281 195.261 94.19 195.261 94.1695 195.261 cv93.8765 195.281 93.525 195.183 93.3697 195.007 cv93.1558 194.792 93.1168 194.558 93.1168 193.465 cv93.1168 187.724 li90.8707 187.724 li90.8707 193.894 li90.1666 194.616 89.6792 194.871 88.9957 194.871 cv87.9029 194.871 87.4136 194.247 87.4136 192.899 cv87.4136 187.724 li85.1685 187.724 lief95.2974 188.057 mo95.7867 188.643 95.8834 189.15 95.8834 191.2 cv95.8834 196.491 li98.1285 196.491 li98.1285 190.478 li98.8316 189.658 99.4371 189.325 100.219 189.325 cv101.273 189.325 101.761 189.99 101.761 191.416 cv101.761 196.491 li104.007 196.491 li104.007 190.653 li104.007 188.74 102.796 187.452 101.038 187.452 cv99.8472 187.452 98.9107 187.94 97.9927 189.012 cv97.9527 188.994 li97.8355 188.173 97.6402 187.705 97.2701 187.452 cv95.2974 188.057 lief108.635 187.724 mo106.389 187.724 li106.389 196.491 li108.635 196.491 li108.635 187.724 licp107.58 183.721 mo106.818 183.721 106.272 184.269 106.272 185.011 cv106.272 185.772 106.818 186.32 107.58 186.32 cv108.322 186.32 108.869 185.772 108.869 185.011 cv108.869 184.269 108.322 183.721 107.58 183.721 cvef118.063 188.35 mo117.184 187.724 116.266 187.432 115.23 187.432 cv112.596 187.432 110.604 189.501 110.604 192.196 cv110.604 194.851 112.439 196.765 114.997 196.765 cv116.207 196.765 117.223 196.433 118.141 195.73 cv117.398 194.207 li116.637 194.656 116.109 194.813 115.465 194.813 cv113.923 194.813 112.908 193.661 112.908 191.942 cv112.908 190.438 113.904 189.325 115.252 189.325 cv115.914 189.325 116.383 189.482 117.145 189.99 cv118.063 188.35 lief124.055 194.616 mo123.313 195.066 122.824 195.242 122.336 195.242 cv121.574 195.242 121.047 194.753 121.047 194.051 cv121.047 192.977 121.926 192.449 124.133 192.177 cv124.055 192.489 124.055 192.567 124.055 192.938 cv124.055 194.616 licp119.563 190.107 mo120.832 189.442 121.652 189.19 122.473 189.19 cv123.43 189.19 124.055 189.716 124.055 190.537 cv124.055 190.673 li124.055 190.77 124.073 190.829 124.133 190.965 cv123.293 191.044 122.551 191.142 121.867 191.278 cv119.896 191.708 118.919 192.645 118.919 194.11 cv118.919 195.75 119.935 196.765 121.594 196.765 cv122.551 196.765 123.137 196.531 124.348 195.653 cv124.522 196.374 125.147 196.746 126.183 196.746 cv126.455 196.746 126.69 196.726 127.139 196.627 cv127.432 195.242 li127.373 195.261 127.334 195.261 127.314 195.261 cv127.022 195.281 126.671 195.183 126.514 195.007 cv126.299 194.792 126.261 194.558 126.261 193.465 cv126.261 190.887 li126.261 189.677 126.046 188.897 125.597 188.427 cv125.011 187.822 124.093 187.491 122.961 187.491 cv121.867 187.491 120.734 187.803 119.563 188.427 cv119.563 190.107 lief134.299 187.724 mo132.23 187.724 li132.015 187.724 131.976 187.724 131.78 187.784 cv131.839 187.588 131.839 187.548 131.839 187.335 cv131.839 185.167 li130.707 185.167 li130.297 187.374 129.848 187.822 127.855 187.959 cv127.855 189.365 li129.223 189.365 li129.438 189.365 129.477 189.365 129.672 189.306 cv129.613 189.501 129.613 189.541 129.613 189.754 cv129.613 193.29 li129.613 194.011 li129.613 195.75 130.551 196.667 132.269 196.667 cv133.303 196.667 134.124 196.471 134.963 196.003 cv134.63 194.54 li133.909 194.832 133.519 194.93 133.069 194.93 cv132.131 194.93 131.839 194.52 131.839 193.172 cv131.839 189.754 li131.839 189.541 131.839 189.501 131.78 189.306 cv131.976 189.365 132.015 189.365 132.23 189.365 cv134.299 189.365 li134.299 187.724 lief138.496 187.724 mo136.251 187.724 li136.251 196.491 li138.496 196.491 li138.496 187.724 licp137.442 183.721 mo136.681 183.721 136.134 184.269 136.134 185.011 cv136.134 185.772 136.681 186.32 137.442 186.32 cv138.185 186.32 138.73 185.772 138.73 185.011 cv138.73 184.269 138.185 183.721 137.442 183.721 cvef145.054 189.248 mo146.48 189.248 147.534 190.557 147.534 192.333 cv147.534 193.954 146.655 195.027 145.309 195.027 cv143.824 195.027 142.751 193.68 142.751 191.844 cv142.751 190.302 143.688 189.248 145.054 189.248 cvcp145.288 187.432 mo142.478 187.432 140.466 189.423 140.466 192.177 cv140.466 194.871 142.38 196.765 145.133 196.765 cv147.865 196.765 149.818 194.813 149.818 192.098 cv149.818 189.442 147.865 187.432 145.288 187.432 cvef151.26 188.057 mo151.747 188.643 151.846 189.15 151.846 191.2 cv151.846 196.491 li154.091 196.491 li154.091 190.478 li154.793 189.658 155.398 189.325 156.18 189.325 cv157.234 189.325 157.722 189.99 157.722 191.416 cv157.722 196.491 li159.968 196.491 li159.968 190.653 li159.968 188.74 158.757 187.452 157 187.452 cv155.81 187.452 154.872 187.94 153.954 189.012 cv153.914 188.994 li153.798 188.173 153.603 187.705 153.231 187.452 cv151.26 188.057 lief168.071 188.232 mo167.075 187.705 166.236 187.471 165.239 187.471 cv163.248 187.471 161.98 188.544 161.98 190.184 cv161.98 191.551 162.585 192.177 164.791 193.056 cv165.65 193.386 165.923 193.641 165.923 194.128 cv165.923 194.676 165.317 195.126 164.576 195.126 cv163.872 195.126 163.111 194.792 162.313 194.128 cv161.434 195.574 li162.252 196.374 163.404 196.823 164.713 196.823 cv166.861 196.823 168.285 195.71 168.285 194.032 cv168.285 192.899 167.719 192.079 166.607 191.629 cv165.357 191.123 li164.518 190.77 164.205 190.498 164.205 190.087 cv164.205 189.56 164.732 189.131 165.377 189.131 cv166.041 189.131 166.567 189.306 167.408 189.815 cv168.071 188.232 lief6.96436 171.812 mo6.14405 171.812 5.98829 171.812 5.28516 171.851 cv5.57813 171.207 5.63672 171.128 5.96827 170.308 cv6.33936 169.411 li6.80811 168.258 6.9253 167.946 7.29639 166.834 cv7.3545 166.834 li7.70655 167.946 7.80372 168.219 8.27247 169.411 cv8.64356 170.347 li8.93604 171.089 9.01416 171.226 9.30713 171.851 cv8.6045 171.812 8.46729 171.812 7.64747 171.812 cv6.96436 171.812 licp11.2793 176.965 mo13.8174 176.965 li8.38965 163.945 li6.45655 163.945 li0.970215 176.965 li3.27442 176.965 li4.67969 173.492 li9.89307 173.492 li11.2793 176.965 lief14.6968 168.2 mo14.6968 173.608 li14.6968 174.741 14.7945 175.346 15.0875 175.893 cv15.5367 176.712 16.5909 177.24 17.7232 177.24 cv18.8365 177.24 19.6172 176.87 20.5938 175.874 cv20.6719 175.893 li20.9058 176.831 21.4522 177.22 22.565 177.22 cv22.8389 177.22 23.0728 177.201 23.522 177.103 cv23.815 175.717 li23.7564 175.737 23.7178 175.737 23.6983 175.737 cv23.4048 175.756 23.0538 175.659 22.8975 175.482 cv22.6827 175.268 22.6431 175.034 22.6431 173.94 cv22.6431 168.2 li20.398 168.2 li20.398 174.371 li19.6954 175.092 19.2071 175.346 18.524 175.346 cv17.4307 175.346 16.9424 174.721 16.9424 173.375 cv16.9424 168.2 li14.6968 168.2 lief31.0347 168.708 mo30.0386 168.18 29.1993 167.946 28.2032 167.946 cv26.212 167.946 24.9429 169.02 24.9429 170.661 cv24.9429 172.028 25.5484 172.652 27.7544 173.531 cv28.6133 173.862 28.8868 174.116 28.8868 174.604 cv28.8868 175.151 28.2813 175.599 27.5396 175.599 cv26.8365 175.599 26.0748 175.268 25.275 174.604 cv24.3965 176.048 li25.2164 176.849 26.3682 177.298 27.6763 177.298 cv29.8238 177.298 31.2491 176.186 31.2491 174.506 cv31.2491 173.375 30.6832 172.553 29.5704 172.104 cv28.3208 171.598 li27.481 171.247 27.169 170.973 27.169 170.563 cv27.169 170.036 27.6954 169.606 28.3404 169.606 cv29.004 169.606 29.5308 169.782 30.3707 170.29 cv31.0347 168.708 lief38.3365 168.2 mo36.2666 168.2 li36.0518 168.2 36.0127 168.2 35.8174 168.258 cv35.8765 168.064 35.8765 168.024 35.8765 167.809 cv35.8765 165.641 li34.7437 165.641 li34.334 167.848 33.8848 168.297 31.8931 168.434 cv31.8931 169.84 li33.2598 169.84 li33.4742 169.84 33.5137 169.84 33.709 169.782 cv33.6504 169.978 33.6504 170.015 33.6504 170.231 cv33.6504 173.765 li33.6504 174.487 li33.6504 176.224 34.5879 177.143 36.3057 177.143 cv37.3409 177.143 38.1607 176.947 39.0005 176.478 cv38.6685 175.014 li37.9458 175.307 37.5557 175.406 37.1065 175.406 cv36.1695 175.406 35.8765 174.995 35.8765 173.648 cv35.8765 170.231 li35.8765 170.015 35.8765 169.978 35.8174 169.782 cv36.0127 169.84 36.0518 169.84 36.2666 169.84 cv38.3365 169.84 li38.3365 168.2 lief46.419 168.297 mo45.7549 168.004 45.4234 167.908 45.0523 167.908 cv44.0762 167.908 43.2364 168.748 42.5337 170.153 cv42.4942 170.231 li42.4166 170.211 li42.397 168.961 42.2212 168.278 41.7725 167.927 cv39.8003 168.532 li40.2881 169.118 40.3863 169.626 40.3863 171.674 cv40.3863 176.965 li42.6314 176.965 li42.6314 171.674 li42.6705 171.636 li43.3931 170.503 44.0372 170.015 44.7789 170.015 cv45.0523 170.015 45.2671 170.054 45.8921 170.27 cv46.419 168.297 lief51.9224 175.092 mo51.1802 175.542 50.6919 175.717 50.2042 175.717 cv49.4424 175.717 48.9156 175.229 48.9156 174.527 cv48.9156 173.453 49.794 172.925 52 172.652 cv51.9224 172.964 51.9224 173.042 51.9224 173.413 cv51.9224 175.092 licp47.4312 170.582 mo48.7007 169.918 49.5206 169.666 50.3414 169.666 cv51.2974 169.666 51.9224 170.191 51.9224 171.011 cv51.9224 171.149 li51.9224 171.247 51.9419 171.305 52 171.441 cv51.1607 171.519 50.419 171.617 49.7354 171.753 cv47.7637 172.183 46.7872 173.12 46.7872 174.584 cv46.7872 176.224 47.8023 177.24 49.462 177.24 cv50.419 177.24 51.0049 177.005 52.2149 176.127 cv52.3907 176.849 53.0157 177.22 54.0503 177.22 cv54.3238 177.22 54.5577 177.201 55.0074 177.103 cv55.3003 175.717 li55.2413 175.737 55.2027 175.737 55.1832 175.737 cv54.8902 175.756 54.5386 175.659 54.3824 175.482 cv54.1675 175.268 54.1285 175.034 54.1285 173.94 cv54.1285 171.363 li54.1285 170.153 53.9136 169.373 53.4649 168.903 cv52.8794 168.297 51.9615 167.965 50.8287 167.965 cv49.7354 167.965 48.6031 168.278 47.4312 168.903 cv47.4312 170.582 lief56.7593 163.397 mo56.7593 176.965 li59.0044 176.965 li59.0044 163.397 li56.7593 163.397 lief63.7076 168.2 mo61.462 168.2 li61.462 176.965 li63.7076 176.965 li63.7076 168.2 licp62.6529 164.198 mo61.8916 164.198 61.3453 164.744 61.3453 165.486 cv61.3453 166.249 61.8916 166.794 62.6529 166.794 cv63.3956 166.794 63.9419 166.249 63.9419 165.486 cv63.9419 164.744 63.3956 164.198 62.6529 164.198 cvef70.7144 175.092 mo69.9727 175.542 69.4849 175.717 68.9966 175.717 cv68.2349 175.717 67.7076 175.229 67.7076 174.527 cv67.7076 173.453 68.587 172.925 70.7925 172.652 cv70.7144 172.964 70.7144 173.042 70.7144 173.413 cv70.7144 175.092 licp66.2237 170.582 mo67.4927 169.918 68.313 169.666 69.1334 169.666 cv70.0894 169.666 70.7144 170.191 70.7144 171.011 cv70.7144 171.149 li70.7144 171.247 70.7339 171.305 70.7925 171.441 cv69.9532 171.519 69.2115 171.617 68.5279 171.753 cv66.5557 172.183 65.5801 173.12 65.5801 174.584 cv65.5801 176.224 66.5948 177.24 68.2544 177.24 cv69.2115 177.24 69.7969 177.005 71.0074 176.127 cv71.1832 176.849 71.8082 177.22 72.8423 177.22 cv73.1163 177.22 73.3502 177.201 73.7994 177.103 cv74.0923 175.717 li74.0337 175.737 73.9947 175.737 73.9752 175.737 cv73.6827 175.756 73.3311 175.659 73.1749 175.482 cv72.96 175.268 72.921 175.034 72.921 173.94 cv72.921 171.363 li72.921 170.153 72.7066 169.373 72.2569 168.903 cv71.671 168.297 70.7535 167.965 69.6211 167.965 cv68.5279 167.965 67.3956 168.278 66.2237 168.903 cv66.2237 170.582 lief75.044 168.532 mo75.5318 169.118 75.6294 169.626 75.6294 171.674 cv75.6294 176.965 li77.875 176.965 li77.875 170.953 li78.5782 170.133 79.1832 169.801 79.9644 169.801 cv81.0186 169.801 81.5064 170.465 81.5064 171.89 cv81.5064 176.965 li83.7515 176.965 li83.7515 171.128 li83.7515 169.215 82.5411 167.927 80.7842 167.927 cv79.5933 167.927 78.6558 168.415 77.7378 169.489 cv77.6988 169.469 li77.5821 168.649 77.3873 168.18 77.0157 167.927 cv75.044 168.532 lief%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (Liz Loosmore) (Coolwise Creative Pty Ltd)%%Title: (AMTA Logo text_pms.eps)%%CreationDate: 3/9/07 11:30 AM%AI9_DataStream%Gb"-6LN_t(Z2j`M5lZ?:2@a-VJ0Q2tS9$U12VTJjk+&ths/NYqOb>F`hKa%aeiA(8;Q7:>\oN#&P0&)ud&PZ$+8PV[ZO*5d'"k4i%"H?&FXN2ZNHhE;#cOZ5e,YgY@%'Kp\5dM>7O9KktaN-Ka_0^L?12,6BrNgCR;X<u_m7+_Bb9le>;WWg.k4YWQUY_pem;B8[:FI(r%mg60#m(-9pW+?Y'ht6VkX3qhaCM3-WXh*DCa$"gC]TRbOf(se[%U+(#>T!,0mAAEPl7@."Fa?qZn<taO$9*Yb!*sU%<irufj823q%bKt!Ubm8'9L&Z*i=A*I"Ol7roPn5XV@5g3NAU:0o05;U%?GB_0fA!Fj,s(=l>-l[+okT6G!\7n/TX9B%49%2^JWt7oj:!Ca8qN6_%X<]8%8X8KK7FU1T`)CnnEb^*SC]DL'N_>X`X5E>ndMY$F=6LXc])BhKs1i/9cl'#XE^CMON2gVBI=<nae@O86HCkg7\$+0`Nn`)f%"44;W0cD@.+I69&q-UW[^f@B2;<n=Z[2T4D5W5=Ak+e,+o;M;*Xm:(Jg8VK_g,B0'[)d8*;3k1+6)=P=19?Sq,Z[QO/24D(#V<4e%7C)e;s/4+OA([$rLB@'h#!@%^Xaei)=Z.M2*6tT9nH*:4h/9pkE1Fcm<;ICK<(;$/?aK`-nHKWuqm@4$dUK7\BK'o@J<Q1BR/If)%7\foJT@s5k:S><cLZ1sU^Rhe5)C>l3?r"cVp%>C@J4I6-p7SbLH>bU=>d[k?--iaDDX4Y5s7f:K]7\sQii:gP/1%q/js/Re54&"!%d#i_VCj>hP6U,=t:hhiP+5KiXZX*rQ52a!-:Y<:A*PsXUCJGi0Vu>Mo2_Q\7PX/Dt+5)VY]Fiu;hp$2R;=?B5L0]"nIuiRpR&EKV%<UJJad%:eW8+jWuS'd5[[<GI+Y,N^kMlja/NHW?27f,r[<DD87\t-';&\Id`WsVh:*7XjCB;4/*%[s*0j_(QF[tc**KRi^)jWg=V%&0*EeDn-qXG"^@HLa8>q@]*6?\"BI)mnXL:5*<$(O3@f<(e2p"NIm9OEe\2)L185YA;GtJn-3O07AEs9lGZ(E?d'7mU0:NRE`"<D%7A7d=\K\'nH;W;eJtCS8\u)NeY3</Dl(Tfo][#bX_'g!*HD+0V(NK\]TGEcD>`];%5q)4+Y/'1ZHnhhf$i,06Qe1eC?HLB9.50h;%4J1g-/<_l1`LNMMjRTid:<TUs,q%lOS<st1I#cCTR\:HR>q9T6/Z3<OW[XC<8XcRa)R"-!Wu>_Me^]8?=*(&/<CTtf=d;r`'i\N$%<)t`<U7s.A-*QAD9i2WoOVLG"'g^dn:17^$0$:b1ORmKfemqc]A6G4/;&3\Kk%'d?%&kZ>;F/Gu3Nt<>"Em7t,Z,1"?33hR)IcRn%`IaHnF.t"]U*@aS,`8<=nffHeJftg3>pou(+X^rTap8>6,Ea/VK"qba_"%\:jE82PkP6+$nLCa31,&/A0C[oDn183k78E"Q>b9,Y%)Q.T_-Z]nJEWQKk%*(+S9I(!e_<+lC(^jhcAJPheTl$(t;mjTKM<&Hd$Tru0#0[P3`B0D[o$qk1hd\YBbC44+L1befk$a/aKA!U#%fki[11!P3`lS<$C(75`U,81\]KM;$!?sYt+3:gVD"XGo1)<mu]X'f7Z"t5rgeBJR4dn;POKj:p/8`iHgZi9ITilm<l";WYX(PBp@%]l`iqO=P6U3V1\?V4*`;0%ml_#,Y<C;_!rEV3gk1,8X!+Qu%'`aebJ.JR!Klat^[<3Pl4Di<X`Yjs?3a1,"QQFED,5*<!e'M`$TO%%)PM'_FsMNQrfka3V1\C9-op6?8B&:o+DpVl6n*`d9.J&VYjL[rMuParNsDn/FU;phc9/Oq4T<O?!\+_/p6AUI$a339L3-(M/m.L%.pL<<%pf0!0Q)VTS]d6^pJpik]'h-D0?+]*kK<TQD<OlGQf>^r>HZeKjL[h;,n+(Fq"'G?&%M64r<'.:;,[X7K-;8Q!H3Y]r_H[h%$02!S=l55.#"-C<%E]SHV1D&UMe\KB(9&bQX\#dp.o0g-RUBpj.6Eo5@M=n'Z1s=LTuEW>hoZAdBT(=k$)!GiM%17G9>iC/UB5.5%-[S0?L3.),YtQ)oFHUoPG*#lrb=5BfC"Z;*Se`/P?7fZ&).-j1D2,@WN:pl^Tf1`4n<V$p(ubNtmXXC?:hLqi?IY1cc-,Z6Lt?),%[7*c\+eu@`(@)KRB8C=joGM'?SkQdb-<_]/Rj[f0,kK$<H,A6sa^f(<p]X!#,V_e;.M<(<$m?K$W^,cW&3B;kgc/Jk$nb$SK0q<u%aumKOnPXo92%YC&Lk?1H@5,KN*))CnGY9/<$HS84Eg-fSdQt#Ei(ji[9n3gI+En16T*B>'#@"!V9eq6;3LEVDCm>,]94>V\BjemM%@*E^HC'Ln!#;[r^Z'2ue.4SqAEaT1]?kJ<s!NaQI%gZPp-*WgF=AKC-BHF7S%T_+f5R'2U%KXeU"D1^9o;dE[c@\.._(6NJ*#pYl%!;9Rt]<-V^f"d=/_4Kt#f*r90%_,(1HS9s+<u>lV1iNTgi"5,1(`4Ai*3bh2%YFnEK;,F)7HD7R."GAre.%Kq%bOPWO$`up6NI]c%"&C0Q*f1AuM8>hb,%lMN!X&W""\&Zu%!2qr:!kXG<a]d(i+N3_%sTr3OaLC&*KdgbST.64-0;"OS&4QK[3O+[0\_1Q72Ua2&RS%I%]cubJ.hP]a7_R5a8gRu)V'D-k'Q$G68t[DW?E#0t7YQi,--_T.Kj6+dC5m0jnhtN4JT*U>3,glaK[>rM4CNJBH%sD@6oZ96?Qo?.%&tfgc5WM)$-kL)XH,.TG;Sefn!DfLYT]$<3mE"p\6A,N]73a"/6BcUE"_WO!s#Rsq3l&0+9Md8O2"LiMH;X*2aebA+GQ@+<T,B/.%Nej:u!MOR2i(R[9n\rbc-Z0D)R=bQQ@f2Y0GZb@ZQD6cX=/<Y,,3<&pR-aM9h<qr-Gpe(YT6hUn*X;khTqO4$o9+aC@c/%q;`n7Z%(le89ADfqkLY3YhP0"URa4$:V8TSHdJtDhq'<NWud!Mpn:3K1XI+X7Dq^L]Xb*c$]K"8t]b:n51O-=:h.+MP`p4&AFqd3+$l!NiS%YBDe2/*@ZtN$p(Ja1^n#1V#a<FiTolrGf#&c:mYeHei[REdum1N\cmrj'Hr"$1u::S.OkE5@5"B0p.OmnLl6Yp2H0@p;M9*qQi+F%\/8"NA'tb;S-d7tNI)*\Z6HK%ZdJfA$eK-]V',b3j8>CdZ-<L9n-/]m[eNp.\=H:<=^U?^=N7\im^l7=,1f!.'bGY/S$<XM/"1Nd%p;B`occg']ZYkVk"b$,^)@\a:GgFA0pMBuR3O_+\j*hcYh:ER)p4!\_M:6@Aohe@e^lqXu_RYa5cj0%+,d>atQ?r6SBYTE7<miTX%blkQNE><VhWb.u1r'47F6<Q+l:4AG5[TjgKVs([5f2ZcqH.S=&?(,mj7.WF*ijr[P-+PYU^'*&!VN)Ma++"fWB0Fb(ZL^S1>m:,J%>8K[!YB=Q^96FNtIEBdrp&lGm;Sje@/O2qLD)8dJ8T];jJ0G8F(aUuuC`+JpBBak>\oA?AMfn?N0AIjCr_(ao_ScBRR=S!eZ&-*-%aj1(ak9%50T7iRk:-:_HM(6&cG@:uj8cB*7*5Oj1;qA]cndj=LDi=Pj'`Z/]:Bia"PJ7`;A%)#)rd@)^f<3f`J&jcUc%rHuOI"f^%lXp<K;JOB[L1`C@3W4)25F04rbGqT8h"p78LiN]a^2*gP590_ibK-b7=od,L(B=t*_%R3lr944N&g1`r_>NCWk#B,fZA2idF9)AA%=ikQsqWYis:m)h-kqD?WOplH2LQ_?o+;`?aj<Wg6<"H'Yc\/^[-%sW5&$13*#E**S4HS\G*ukcM@jMY]IEr.6NBn14)X'l@\6p'e%<TJqTjbC22=g7mF\RDUeITSW<2^H)sLU5"YL:$CE@BD7LTAXU6a$k5G)]k=bf"Pe6qT%]P[I<p!kpY>KjrGP62$Q"8IEr.6N<*8C%IIi.T0*KLc)qMT5_>;46L:-IF@Hf2qOS"PTc5M<Sd^nUs[E$)2H1];s-&[7TDGY\k.&_VpDGY\g]V+Bu>_(sIH,4=p?%DWRGsOaG%3)(!dgJ-9OecnITKm:HDADM9VJ-c?QQJ=aV/I.)11)bt&)p#VPC5G,r2am\fg>oY\Zt@C=2i^jZ%FIMm%;Xkm_-.\f@I8D*=:9+-%XF8FP/ffJ?=n@pckoZ<>;socN4?>;P/m.G2+4d=%$eDoPLUAJE"_uo"+T9qrRa$hoV()>p\mat<pg>\B]4#O\o>+V*E5UD)os[SD%HC?\rX*Fm$)MMa\g`o0P(<#0o\RDUeITUA"DHQ4r+4_?a)qMSZe1O2Idk&1D62F*K@!/%&)&OhZ-%Ng:T_;K9T[jrbT_;31T[jZZ%T_:qTXjSB&)`>ZM!]GG^H[+,Sk@a7!VF\C9XFHtYFeH3LBXcj'rX*ka>Q7BQkk9Vc"mm`or`bNS#P/T>gsoHSqFR0O^9\f(6a2&u%hOfglc6YZOhn8![ZQ@F51mjep!SCB&$GIkYjL7!0>)#\K2C>4Af`RnG))D()LdF.h'e^,D;3IKQ`/F[TU^ZEq"U/^T6K4N4AEUG&%-$W9$abp9-`gIAa5>H5cOIY13+T]1HU'1<kE*rfb(onlAhr$KN%0Y_L":n*YG^,Dc*@f1V>H[Ao"kFQ\i;C#&iX(lLHYbH*W"Mc9%r(#i'&qaS\h3NR`5fT5P<!Q*M.F:&E?WQ;;+))T]"NMSuJ]j*QTK*KeZ]$)D(2=`uIX"?@2$Z(%EsT>ON%>5K2hfI`7Un<bJca/@%`Pr=J_u[Y57FqOT_j4C:fn#E%@hNF7geA7b;$*@AUF6g2\=is6,2A9N@7hD8MOY8<F-K:OLJadPEX!s@5R$fQ"@]%A"6gC_a_+#X%kn)JZ2%ad]:SUcYa[dEHI7cuY*;k*Oc864hhX]cQgtMjJCJJBT%i?;fZD+>u,n+QTQr(+LihZo9$rNe0K9q-I)75t;!jeqj!D85W%Bh&FmTcm!IDut1b^!%*)2g^`c/A8>?&6!.[1D)Rr_seZ)/aUo#LBoBuK4:N1+H"tm:P=o&!!*soV;N=G<@(::fK_iJ>YrcQ_:pQA%3%o.dM7b*LT'dl@O0[h38`U*=+b<=A!to"8/eauSYYmHI-?MP!#KWYG"3E,;o%U);GbSXf9uL1:]#ViiQ-%]MnH=!leA+dYEjs#'%k#gE;F%CGq;3.6DH%!#X)U$O8E!*UHo!X2k`G'cri4Z(aWmeU+!;5O[!BpLO<?+3<G""%fAF*ZF\.8-8?nM3nii#neOQMD5&nEYW%lr)k<g-+:(]kg43\EIO"%SPeE9du[=$-7hU&<C>]%M(fdc4*uH+U'.EZ0+6?,7b2_V[a5nU?dQ7,nA%+FXN@?7.8'N`0.qJ3N'V8%>9aafn1H'j.DST*`0!h@2s,A&lN&-Oo0S%jYXrEMrb_65dLp0KSi_q+UjD3*[=&*tlI6t)J\sE8Qdd05"g9PO9^cF*:3561aX1Y7%2R=\TM<7)r,2DH+%auc),&oj^eI<f3i35S,U27ZFQt-7ujjN8+f+Q>IEi'_>1io*K\d[:i8_hH\e6IRHj96.*&M:<u#&gIJcB#!I%()RqnZos;I=%%WfZE2cnMB\T^hIZ]i3_?aaAa(HH?@&QY313NqN-sZ*AB7GZ:.+56Eo,KH.TPt_9sS,pAVE0Z2@R_Nc[5=/b_SLc%:5`5iCh/PO&%-Y=c4O\f$P`rE#$DJEW%N,_'e4!f/sKU;PbVLK&\*[TL53aH6f]XRWnD[SX,W@&m'\h%#'rdrL(^A@W/`5'9nWp<%>q\bqhG$n5,W+>1k=!e/fd6ck>i\85X!$GYD'p9V_!=2ubN<ir3Q)%<f<&SV"d-;@WoKU`)E;@23)mNqEH#n_W[6+o"Ug8aS4J&Z%(D11k%p7+tp&o0P5"gag,'TMae95l$QgBCa*3p5F-$U0-lj[k-JCm?`Kf4<TAE0MO3#pPkhM=T?%Tm7[.)H-U,,.$9i.fdrl0Le4%jn&0\--4mI33U(-?uCbWFO?ckT8sK@Nn[,ah/<R%IJu14kAn@4`u;b+Si&dD?#/^^,N<UE)7jq%c,<+pWt*SfnAKjm?5uQ)n^ct<%8&UA\fIg+P:aSlj-/k9m9XO)HK'5M:@20C;>YmP!!.c,u:1Csb<AijHlkX%;_g+O9(I[%0aAK)3=07f[-]CruO]Z)j2b:@Z_a=U%%7Yl.D6'.K@f-=u[,jXB(flJfoNKV9R8Y1&((!oK-[#rb,@iC"nkbK.t0UIa5k_(FK6I+W==>L$_&Z[$`AB&=+0CVp!a\P2*@C`'b%nWK]ab`H>!^thmj"bJKqJ=EK0GQfW@MrIU,r6F>OIc)N/-)*#JMNRtBjM4_<]W>OORL0`_?][7S<uI#e6OE>*$CH<EG_n,C."`Y:%h]\IB5X<C`\FRFd(k=5M2$l?PAQcsD)UE-e'DLl*G_Elo`Jc:PA9Ec;%KkXn4,bdX#(\PNcipFa-#A_=+:;g[PL2[.J^PqUU+Bf!%bHX/u#]=@TCg[TP&9?c(9'@%hMWqI),j,]<?`#K40EOKTS89s+,3D*M!Iq.4/"ec89hD;VGQm_jfa1an*]9_0JO0CE"C-2*hi]OR%S22Q;O_@M3l3B9W<!P7TaWa#V&uaD-OeG&31?\i8/P6XG?P,%Ec3B&L#,EUr@RLClQ],?:4@^%h)@R=N3I]m%74$+nMC9,c<<_+:%.m1HG,j#e,-,7h\1ZskD%qeWVbW8nk##ogbfF&?)!rNj2a8.^j%N9U],j;#/&TEbAJY7l-$D1hf!CKXNh./-(<+W^4Sme_GEF`'=%&Es5t(*4'GabhEp=ndF[acUJ6RUm@6"dbObq`J#K!Ck+oYPF&$;=qsa0^KES6@%!1roPMu:6pSPE/fI'00#XZ)q_;c-QS#A&Q+4l%G>F6L%\-'T:^03m$Q@)'7_'EC(QW>9$:fT8KAk4lTg3ZQpDO>?<."o:.,i$,r74j2#/icZ3APp^X+VZ_)%54N9d1"i.6*m:k9c6i%.e9M]"E7h3f"dEHAPdsZ$PZF0dOA9*$KEo<(iZDM"YcV35p"DBE'0P::-dc.'h"8uL1k8/O?IhE!ln/h'k%i@q'?Z?8tnT6#4D"$%#V=aUlpl4MJ7B!7PNPqed1"D,=+Q\eWr^?_3!h^MO:u3G_Q*sYC7L_Hq$q6mH34?1pTU/[gEa=#[#R8C"a!&\VBSC=YsOdOV70D>%1X@&@7H.nmg5:b[f(]5T3\0D+@Km9\_-)n7PA&?@?\:OR=jchmFUL!P/EZ,OWW<0!VM7+N1+eS6*"m\9iaE_"$Am%P;'%hL<(U[.%[q^Mo?53$!a:"s5GR51M;;2DA=_*\0+Zr^Xr=kMEi#H>[<HCkPU^R21BW=<ki)9f.RmZ=7K;+YG;?,WN'oe6nC`ga$M2KhG;0&>,%H&<sSP)k.'_p6KVn0G2ggh^s7)$!GmPfO<.KI8^Q5(ia$8d<6XG82Na8g79/.*20j<!jTOFB/7BJf.tE]f?Kt*5mNH4cpthLmT"F%%@I=\S41g-b\WJs0nu?!!Pi*(r"a#</FhaWe-Xb_/";/g9Mk3gAWub\W"Bm=22TnK8GARSdM_4AM8d8dLcDnbAp7WjM*e-/.Mu4p%(2><L'1N[<MS?rJ,j6QgLE<:j&.oW()No;$Wis3,a05d8"S`6.WlSjh5WPSk#3c^S>-`nc\deRH<Y,P3Wjode;LumQ<&e?A"O:I1%FLiKt[!jK(:&FUCV2)j2iC6L?Sj^&VEN+WUE)`beL;\TjdK=r.;`E3ZEtV7a]NG_cof+6I;9?Ul(qHW/5^F[38V&Tt-"&."&5giJ%isZPdZU<q885s&DC-K`ii&21F"c1;7#ga[3S?Oh/_i)%0"*!3nM_@rJ$C*IE8:VI>68OGfPc.L5##iVeLQbeI6=C'1"udcj/:k_Q%7o':W8MY@=U6u$-SK3[R</QJ]i)V1(mNQ?IWB_(*.`n1oV.%))b^k9ON$Y1!a9,)QDb\,<"_\rY,LC'Xhgd`,`Wai!Psjo%$7aR`%&:2Kt+0ZR4<3$XX<k,Fg;i_XH:deQ"#;*sdFBtD!2r,>A%SD:AN4,C@eJ\n+m9p[,)C838W3n@u;,,:?pYZX7&NR-b,q;G@>Y:_N%#8TERr%4X!=tmi7M'dfW&]>\kN&8,(8jIk8gH\mW9F$l*K-OAr)QNt<i'NU,Ol%>n:,N?l-&7,sdGTJ!]LU``5a>G9N$Zk@CLG*r%C8=_!P#n`3kbq&U2-E?#,9t6/3T;g`B$9lu*8/6'MC+H".LsDkQ#IHCkRYO$XG95W@bj=;Bd>VcU**oc8d/L59fHHGCoGS["GDdO%Qe"$WKd3aVh1Y#)R]jdp9-RgSoI9>G;>`Pf?9#X.#),.Rd-PPR`LFN?dY+)Vq,cX>BV:G`RQs8s)8e@XbIjQ+CLhsQ9G0Z)FhrkV%8;)nH1O(W#PO=MEWGP.<SEC/XJbDFIYD4\-"Cih!$+O<Xk=lknPG!n+#4N,+d\mTpDq#.RoJIPpETZs0Ni6>Z*b)hbSN<A?"I:ro%=FgZoR/]Of7rc>c%>,<cV6?!-NMkLbI##XX(aYgu&PT)g`04jHC")^2kW>f%ji3MRNMO"FGu^jg0i=!d"UB__J/VH'ALh$$&.[_I%<1""%iC*9J?Yg<G-FsnB?s6]4Z3j418u"B$*$VC.Ca<F//uX]ZPd3-+!uMo^`afY]R$f@;Kj[G<3E3#oa];M5693PiS46s='$?'p%4`b/9OG%Yi@`0oSq]VXQZC+*j>S>1NAk7\#0SXVh;moW-P#+ojBp?]M!"%b;]6Q.ONeVSA+@HZTL1MWp",UF5Z*O]giJ'I\YQiL+%'#mCm*W)!r%Q'0D.V(g^D%S69'R-o'(s68#W9DJ$,^p,5?V0T/dJlg$R5<?D(s)g@&o7=aAA&(V&[7UHP!pK72.ES!,U#^Q2<]d&%DR(1;jA<1=]L:6C5\Ql*'cJ]u]uT53N9nbZL>Kf^K1L$9kV](XiJ=$NJK4A5R#\qs;C<;8P=2Er8K`f>Mo:Mn%HPT0.J>hKOMg=I%8ZO>3E!YR)CheQ7@X+/q\:bnFW%ej/'$"EY=[;X,dQ!9b2Ot(L'-rSOZ$DAB6^0@q*D!n<'G&3'kV3@+eI@AqE5dg@'h\Wh9MH0&%a4!9`TC_4CUY68m5+5JkO.Mc!_&Nf>RU7#EU,e(JN2E$)0\9Kb/sJ6ITB/hcD]*qN/"WL:P="XBLN<JUT`rCQ_giVgSRdA/WSoR)%Jt<%K9+hQh6r^uXLo3N4.hZWJCFJC'dst1Y?NsTNOhG0;*'AeEU8D?Q`F7+;,Ma[!N6c$j,Y=JoMV09sGN6g/#kDLb"cA!Q.hihW%hEo%E\H*Ekj5CdC!glVX,)u_l508b$"L8Eiga4As-?3f,"qmYEX^!M][k-Eh-<kH.)r2,L2QIIkWo9''$R@X;Ue%5_1NL53ga5sB%O!YWJ9J\*IGTn4JDWsDTN7JOc$nW4*V*oZDMQ-S4C-hqBU2N`)nO.61S=rT7('o,UTV.ab*uD4Oa_#pcq"2AMA3dMM[h?`0>8Td0%"N_qJbS.YipJDqCDP;YmB5\?9$pq`m/gLuR)()Z0:aR/.@[q,r">cuD#/tSG>R:s:d"o"VTmMPD(p^[oo4P(>"a-3+5d-Fh8I34D%."ggga<2>Z&0I14;26#L;)N81:%Fc4]f;/P`nUd$Y]-<W3[tJ4<aB+u8L2Gg@KKubB>Ukd@qo9D<"phi@ZgPMOYEDbR#r`R\'1&G%%>HGX)^ti$+XZ28"+ZK?#H(EoO]a_dkUL#&K`]:tK@.aILQ!*ET'V(G<-)gjR2L^):,5:EMDH*V;#hhufF8uW[]87(%@KnDrjM_4%*/qtlJnb0OV'M5jO%8I06TPp"eT@4\OH/[si<26<,<JjiDVQre+:[`cDoHh.ND)Tm`Jj%l_P*\OVN]CROEipb"!'n1DT-_'WJfRu%*Pb4a<A:1/KqiO:("OhTDPedp`H;OM_*uY,lYo!ZUL>4#lP,Jm"n&l1?m#a8m'mOoi16eVf,oPTSu<,BJ2C;'LKbU,RCAqP7D]Ib%i/-_5FS%EHNp7=4VGaLo%Q>k@ksES@7i7B.A0e=qeKJ)#_`I,gVTKS'.Ak"$Klmab(g5,ol]?e8b+>gImO9X3gMn7^a:@L.'1l[;%:JdsND&p80eL?m?;0Y1&_nD1aM3o%..4FqBBLd1PIKP5_mALL2IaO3q7s2+,4b"u^P>MA'U)hce4QMOfE/@U/6n>9)[M&hiNp?*m%(b/<\#OEtWCfs%E0YAe7Al_kYUU%3sAk$of%iN.kl=<T*;q4Zq3Z/$2h?fb[@[NQmSZ#<'+AWU:W"(aLBN@&KWl#i`A@uMR#L.j)%+?E6d(^PqhW")l8,q#WYCTC!r*RpdnPT87"6(Q6JnXD6RDV5#UZsu.5;%VM+*=blAr/Mp@&r[P.1ShpZ#-o,;=s4pSBM_Q5Qm&#Z%>$9htIQ_6+Vmu&]Qi1g8;sQ"ip:nCPU<a(5*HT4;4qO]E?];Ca8XB=p>1I`(fsH3tc'%`f:IhQLU?dR&2dP[D23b$t#XX=1/8&M!%,o^@pr<:mu#RgHZDdJkCEU/F?&HZ&ngd&C)cEaTRX;c%"oJRZpo#ptKg!J31Fi+XkQH.M[q;jnCo<i#_E!)e?G9Fs[&"9M:^t&rR%&Ek2(J?9b+:^D!!?._74$Q=GF?chR4h5L"6[DQ&B5:uFNO_%FOHL8C&B_7p`&o/kkAhC:1XBjDHSOUj*_3K$+@lRg(Ef]mMS3t<6%dD>`S\/ETs\>qB#B-feqZ-FWGTNh1E5nHNHTJpnMB;J',kXU^o.l1Vk-UO&Dbg>1P$G?/MU^f=DQ8O.q6VA.Pfu,WCruV/h\ESId%%6o$LTAe"jHkV0#(p)qE23O*7]gtNHA0c(DP.q`l<fPj!p^Fs6!&0BTjakloF&%ekV'm/>nEZHlqG9Zk64;=<5Z+gjF$h+4BV+3R%^a/8G6nlFfVn*'u^f:=N5_K]1FTEuED$ZX>4!bG"Pr<5AWN=d?"-bGpHt):i.Wk6`ZT-%J(*>55q7Q`[.s;<Gk:Rt8[=IVQ>UL=W%]OjOYpFOn?Ips("Ve&9))"nSai'&ZAZfN117orX8M2i%%00/]#1#?u%n^X<"5pI<;^Oj__7QJKc2D!sdaNpWt^&Kk*G>3pPqYHZ\%:$X^MHBu#tSu()Z;<LHBgY=i;8>-ZHT@aU5V2sgVS$8=\a1Mijq/1pDDW5DZa\=G]94/(XXP[Dhn5m;TWk$XXS,U,`5!!CZCZJ!#%Y%kh*EPe\iI3__jD)PPtON,%=,o!(R!"FDV=/do.!OTf!54n)bh#Fur5$c?S];6VYR^IUD$A_K<!;A8Pr[N'VV/c[Q+P?Q=+RsrA%_uD%uefC.#B>%10eljDZO)80Qi7rJ@jZst#>pYP4LW>SFQ-dK:On`:Tf[rR^@Z9c77PhI!lFg6>LFLhBJ6b/+s1?`fNF@&maFihd%nV.9rf__QV%`bdlLE1lc"Yb+-f+UK4;7%h)anJoJIibTEUDRTt7_A4kX,\6.X5+,X_Z/TI/F7kM$c^Nss(#Pp8L3cWHgh"15I5mR%7_SBm$hHjmEnMLU.lHnNk'uHZ]I<eC'#h5NiI7-3g-r-npr@@MhgtK=jBss4Cp*c8NTRuAU\V"A5<_U7V5c)Ps01HaQk,8B5P8dk%F6&F-(,tVH+SsD&QAPP/W64KkG_S_rpHJP!ok66WXQA4(J'Q,i#Oi8/ZXB*u5Ak)2B5=At]IW`,G?C&P\UBK2fI77"g%3-ZWV%to%IFJmBmEVBb@pSZB=gut_FoSHfY%n"(-]6H#^Jq?pl?uSob7ZF.=rh:5;R^"NQb(^8"i"$/i"B>=V],s<dB-R3*=5rY3<N&E<l74K%#D&#!/d+Y\QA=i$0US2LnThlRC@sV6R+KL<cs=>Rkgf^2Al"UZFtM)jF_Y3,fGl_=rh"cJXDJ1Rk]G2?%/Pg=;QjHnf)LL*-8'&H%G%9IC_b$GDNbc>S&T=nFq6tSt;$X$t^BPpdOmjb3po=STHlJ1E^lOPGir41-X4@MM=,5*SaU_iVUO`eJ/Kb4*_g]H;qY3Iq@Mb]M%8U/4KI'lo!pol>-l94%,AuYN9P$,4AegXV"5,%1_g3m2REr1^KT\m0aC>u*M]Z[R:GC'm,!g`hd<p9]"PtR*7X"lg7Sl^GsNI%Xk%k_&L:Me<T3YMX2H=kXu,\C.="J4VJZo3[T@%j9qh2`d6GB`D)uFtd-8.i][4V;89)Wl#L6=?C6k4cdY67O+@Cph.k!KPTCY\!NfA%*5<:R"BK9Fg(%i]]FP$GFQiD13cu9Yd&N$)!=K/g</i1<m[*t.aZ-^bW-&)RGH-9-!525]<8(Ztjo[m"M$@Y&J49=!%jUs,+^M`4%Kg:6)p*qMc$A0J5IRmZ[I=NC/$_7#&SbM>N#9Zi:?9":Cp4Ig[WjQ^r]"J<'P$.'?!Wh]b,``TFdmUJ.\Q*tf>c[Q!VVnX]pp:*!%\W/FY%PS%Ug0_6WGYde1I\o%PpEBfr+OrrZqqedS9+X,uX9nlekq<1&qkNtPBpQ>;^%V>ML-!,T_7NHi'*Gi'm_jisJ.HN2+9WPR%6`oXo3X3)%lPRu,ehLPq=:`_@_@iK=>j=d52o9]Cq\hqSG/+sE>OUrV4a10V#mMOT0k#%Q<S2i&[<K!PY!=[C)&(pmm;ftuD[^3'%L(P].ke5i/P#heQiQC<h(m"V$JuWpnR6LE0QB)e,5mYr?<*E/987=Q=MCJ4'YZdf0V+*'.=%p-M#e!+!G5&mh.h]j<-V2&u8>k:E%7l)#L_0gGjgYMmdL2(r&MZtDN[aOAOD"jleRk1:B/P?C&AVADQUnd4,\I:H;KQDYTja+[ElM(g!(c3+!WCL<Q!SWRrD]>iq-;L<9%X0l:4UG[qaSPD+26E2G?6(h"M@D,j/AgCdaM$N0<IRQ*UW0!6MHO$BF9pGZQkZomLh%1A5hfIoXfO2/kJEfkUN#q:-.7uG$b;O<S%1oP7.7KGPN!Gbh)5i(LaZs_GMV,s;p![(LS=X6<u!mkVi^XmCk:n:?=]LN)\HaMbK)[$]ddRI'qIg?h/T[rdH$R<9]n5dKcg@lH6%"5)R%NPnL<DN,4%7Y)ErV9Wb>Cr6,cNc:h_Z%BndoC"*Xk5_sfT@UM=RWLAnl8j!S8_hn>M*ei(#AJKV?/D0E4Y7uZikn<<4h:1t%+5@*!\)).\od''])a8<Y?ioB8=<VCG:;_?+og`]:0"B9a?4C+sTF4*[^?Q`C0s.WVFoe-^Z:-BZHjB'04ucZId5h"R!%ORG-;Jsi%^F'D#_Am"H+kQ*/9!'Sf'Lq5YbdXYa"d-9-Ah#?VZeqIUQF.[#6ck,F:e]B`SB+]<p;@>[)4!4T?j4cA'[2NXKf`cW-a/4U6mT)u%GODZbG&f-jHAeS5d$"dW2u<(mSPmXg^IBHe-Z])=EMB\r'QDA2!KEHl0-:bhd;7`P3V$&VNq3c(E2M;B-kFXK7ctSDojJm!ljrjY%+[fq8HOI*(lP[$`pYC$iYN.;DqtmCh6b?@Rgn%d(P10"a]qr>DrU?KNDCh@M\Xi3e91mu'IG7Y;"h)!Kb9gHSkP@A1S&X41@*t?E%H";?t<jlqhCFnB,9=]s2j(]srH.M$]\bX#d2puV6Rkt?JXnQk&KBlL><W;3MmqdD2F,.6D\ScVleCncpr$ggdNmDdWe[D_\]Ih@a%XmP3k%Wd!fG/:]B(@QFtqAVS2l?TG?Eg56_g&C=G9N%<./=h\^^3:!HDH#\"[O[*BELsj%MHk@3?S-]`^shC*^"1F=MCZ_;\,,(_%bb]V?-la2;Zot%nb-eDBNO,2KX7JVhXXEL-NH4PnIk[Z]+SVIl:$UI`T9&fW'E1ligt?"fT9Zbo*toT5o`G/Yf,@-?8X"@b.R92m%]oCS>o_-RbI/&i9\k:ggIoj1]j/Q34FWZf$0DTe[`,kZ]OjH25WA>nPRhtX.7QAgSEgL.XpL<6-]7Ri;_T-:t7JkQ)H-A43M^>89%nj`AQoI/^7r6!UYbQ=!8LioK00\'HXE;rsnT1_gnFl?Xc-g.VFe*X=4m^g_;qD$0is('7Hkj7Ic$8m'Lj[#EuZchobD0Z;?Hg5^q%,eMCSZL2i#lVon]^:IaD^3-'_qq!!^(<Z2:.F"&Ol0Q$nmIo%60!*Mb;+p&cJiheU?0Elc[lZmH_H7"\RJBg-ro,A?XK96UDhN3^%ccrNVmoj\.ir'O+>ij:'V_J"^Z-F8YD"=r^HkG#qmTfW;[+!!H,Omal;]#lRpq$?%i=E0IojIpJh?liR^BgC-=8h3.cH^?rSXqDc%qW:bi;Ka"T;^TU<kK66^X?Lj#Dork>SRu6*lfuMo@&G[BX-92OR3_#t=aRng,i&rQ\hUP@m:B@F_4@/H0B1gNd:uLU]u@+#b"/H_%rF;*VQPT2#h;D&Iqg6o@fTX*GB8mF5rh@N,qDs=:-n@GF)^,?MkE92Sj$HkG-$FM*m3]?l>rK/o9.BU/16B<M\^bQ'e,+70-T'R*%ioUpA[.s9)GWL9*@#pO/LRi<BSMEdCgV$eFP#XF-kMN&TLJg[@nso8N2."-\e_0!EB8oLZ\huS*s3C'1l(2,_G'^^5."lbi=M#8L%?`28/g$N:<]mO+S%IWk-YBKL3Y`oL]oObB$&_cL2kP8>M=QH-[545^8LRjF_:61(h[B['C);Jrh@+NpYl,E#_k&kmV+4f[*Hb4^)%#BtL,<IB3TIsqmoo_J,p+/CZ.XFKZ7WY*\DPKH)`)X60T:]>I)Vj](pSUqSt\p`C1[mE1D-8/G469;fpArH?E6"$VU8U?[ocKmZk%MpSSfnI*V"<I$G`/IP38Til\$.P6iZq8KJcSp-u#m+ZP=LRi=N5)drB2#HH_JNJ+iJkkF8+nO8kfJG\WDm/q*3Wk+cM0>?&kOuTH%&A5_pms8aR]A4@U9)E=<U`5i-e!9U>=daHEboN[0MK#sJT"L1\L&#QD&?V>3g\G`r<,Q-BH!dK*DQ_R!pbsl$orn!8Rl<FRSnEH3%AWjCeg=m?"E4+,plpY[XHJt]k%=NPPc8BOWSpmtlDomQE`Ia\6lI?\;hM+$m==GN?VgiH=n#<C/Y85^&06Kf8jjrV]SaX*^.A#p>%T0f0Mr:7g2kYih-I[4:U6_EQ:Kni:ae"`2Z2BVq*I/:Qp;f)7)l"m3/(\5#G\$3>]h4md'(V_ib]@SS+ofqS;DDjREZ0UtsA]si'%V<.=abKC<=HCHIhc%J8lP.+55Fu/dd>Ok4N%t4;PJ(E9\IJS*(kKb`;"[$^P)-\b&Do:ebf;6il#J@Qh(J_5GV,b5l$@@,.Amt^R%3V7#?G?h;)5%UDUm9)(.H#AA/?cn*cQ1ikik-?l,Chhf#FQMf#[r#'FOP0+d^O"X?cC&S]4oJWWhmV>!TVpNT4/_ME&A?b:V(dD5%;FiGWjF6:R)$6q@f6j?ZgYC6Nk5TZ.:)Z$,Fd=pHn6dnTi9*&VoZWtP[r_.iIJMoZDeAfaSXWd405bE'DdG&/<aVn/1TAEk!WMBn%)#1-cP<OAZ=C.Tdm+a-uc;PJ%Z1f?NF5[c0A.g#fCi-VqjEX1@hafEl1V(E8-1h2/<TCLe<8(LDE3oDWb+)uOD5!A5lS$'5F4r1[%\9YNZf9V?5jkcK=mPGt:.[k=tA&FBF+DO*]+LnOiiUM@BS-3gXL1+FD+IA921[U<Dnm'tT5U6T>olH'-k?Gh"CCE0LM:#TX"sc54%Po+IuqrQ%W"ZP$i$L\3RqeO4W2.Zs?+$&GV+cro69^DQ[jV,)C2_b2=YQp?$9\BX!1(YR"]OS>1fmE8!pe^d8?`S+2QUj<X%$d'2%Xt(,<jP&MC90lL^PhLS&ps9sH:0`)T71O`p)nfCLP_jr4CE.5^NC48./+H#WF0oL,HM=U_BK*Ob01R7"7=;`1Et9MC;tiDU&rtb$%%lksS4LHPl2fWM4/7'8REdI.ookPTe358h$cXg1KdDNU:81PWc*m;,ki>/7+rV]>)&7lH/[c*10>J91I:8cp!:geo:"]"c744G_S%ej&MC-/7i(Z."`$LLL"pc=c*7HmMmFS%@.tMj:V!fh-L<%#U>Ig)[k>C%4Q=^Ua_XQ8*&$lfY0YR.KD+V\f+]#iNJ)IDTKp?UeHc%HV#R@G+6;ag+"]V[[50n@toqfX-9RWbX;tF,fe?[Oa\Pp\a-e#oI8GGggsumCD><W2;9'7WI1mcSLq3C;jQEdbnoQD3d&"7Zi&Ni%9i'3PJ.HOkYqt&AR`s:DWBCY1',1Wg"I$3JTmMQWFT$nVBA^GLZ7a&[61-fQ3@6a5H=^O29B/k0Q6#$KG2IpY0+R@TIhJn@><G`7%g*8VSKgG(YJA3`#E,"/V@(6c:*VkHUMT*T,NQ'S\a>*3sA,!']9`0Hn1e4s6HpF4[)g+g.]fq(YCEZ:KiYT)WI7.W'8Z=dSlSBEo%+*A!qDIUn0%-D>HbP=B$a#HfiZQng!TF\Mn1;hWm[L0@09Nlq&bGIOfFFtm$e8K^"p<#'`lfh4I;Qk"DC"n(4*fGQ9\akj/:I+ET%+3#*.*s$(/P_=G`5s(HeJ,pSUJnR!F@^]$QceJD5a%p9To2>@O7Ot34hPYQB'sg>mh89E_q''eOMbg7!hcraD2=546B!%WWMH95<%(2meO>P-0(]2uSml+HA:bl174QsW'?o$#Y>@c1MAc8#di]ED,K4*uE=%>sC#Tekr"QNaB"_hNn;L>25qEj*7187c89f-lk+hS&[<%arf&g*JIC<AWo\H:5#`D%jK@NA0)sE[bu,),JD_;8UX(Ln"n>TED(5<+#<WmjCR>nY<a//d1c!D<fa%>Z9i0K^;%YS<:MXX/%LV_%Ynh.d@(;/0gEP]2V$=P\*^[IuU,75@qkse++2AOU6\i/JcFS/=Bj88S=?PHRHMUQO\bsp3T"2@;F]SN6cT%68lY[-#'N`IDHZqV[%HVDl>U5'=Nq,tKFC-RFt_o29(Yf0^n><mOD^?(\>'<B*so!0JDk.9slcgIN,p9tPV/UO#W_D<j;F46]sD1:41U*Z^#05?j+dZH-k%#,-^KVP`/Yd^6s\=*J0NXas(oBY%X'DVECsQto8,MW)gAOU7&e`XnRk=.3LO)iKs1LC#4Q-"T1LFp'8Y8to&(Z<m]n:W`YnGYR2r%0LOLMMA9BV2M9LXg'_k0UL!a^B7nOfIJTL064@om+XlO[T)JY3XD$&*9h[<oTDI;^e45JUfqMS6q"te_h9R]ILLOK$GcJfEVL[b0%I2H@Hh94AOO^fe3A&l[,@0<6GhhagZ8]F4LQ<jkeaX-h?e8$%B`g`\.F/hIu*2bhmIa!hV0A!lF:D['<)l]@u16^[hHf]Y6;q^L#%LPOc4CU(md07W]Kl=-_PAe7^\)?mA:F0F\,!(1ooJ0n]%kF_^_F2c'cYO?[.`_tAT&Kh&.:F>,-!0tmOiK>=1m$pu;E;M/DTuadN%$?9\\pFfd4PlW'i3@)>l:?d2$+=8-^p-Rs:di[;^Z&9bSdX>I0/](GD9u,-d#SS??&Hr#'$4R8sg!L)oj#5]ef]EZu_O7VB>+A:T%_8IcZF7t=`Chc.'at'Vr$ghL@L1WY2M&%uGc%?i^1aY[)m9nofRS>O(HXq.F:;3`R&<oKh>>9pr=!:2Q==C_-Qm&9l,haLm1djoE%L-iirBk'rA`5D,_5m-)H#d80fFYF1-:0id6gY&o^fHT;unp)s%7PQBBDeajiq-5aF>cVe*][Jk\RGj#/R=3U*<f>:Vr*c+#2?">-%7"t$oCl7c;p^f$]Zp:u`(r_f<7BlhS*1O3-4_>-U3M*U3U\):qIHR7krT'SA)k\Iq7>XTr6>FTsNokSI5ODd^Jf1'r2RfBMAXhFO%)/j&X\TK5:jJ0UHmOfO-SQKi._sEsP\`.[KGLFI#!oP[,QPbAJ=Bq>RN4h-(G;4-+)faXA?Wr@2^%QauOA4BA\N6;dfp5O21[oDF%NpqcbRhn4O-5itYE-shmrh0VH?-l6^U"`A"27,&tUpB^cO)'/8MfDh_]H6F<[?$[CLm6``ALl9W@K"BZfjUELX0It[R#qbOJE&U=%1DuuD]fV$@Mkei18$j+te=c]YQU8/TJNh/p'T:o:,L4"e9'Ya,XRmagIK^N3qls)]TE&F\4A9RX#B:^jULS$dhl[n@gJjL9&Z$3i%^W@`K;(9$,Ai99CEjYhZ%a%KEd(\;BV\?9G@ek*TiFH;-^q4PJ;K!c4@]]-F(62m[/kEt.Kjur4XpMEkbg/69']?gA5BZ:]2(,"9%jjbU4duIf'DPk"'!&.rH;q\j:A:*kp:kSKk`?<nGK:&>P/E)WJ4Q6mlB5ZX9OqU;Q0SofLn:&Sk5MCHs)GrTJkA,(Y/5NY(^a+bF%7MW?EDO*r%7jD\&eum<1gF8P%^m^1Z@H*d<Vse<*m'auTbVJ*)Nc13c29bHPbVGiU[WW0V/:=;Iit6`cg^FLp`Quf7c\$ZBSs!5G%@QCm6nR3b$b5qLN!d5(Re1A@X,Kt0d'jk1b1!>+&j61oq[Joi&J3aWK=M;<Sf\%@\>LBHE$-NNUD"65M]%t,jY2+TpNa_\"nl=Q2%QDYXXj1_5&fKLbt&"hq1M%C3\"<'.ili[!CPl8CgY0gB:Ya(UMj7@Kh\Zi0mrPVi'hcS%7O]fFR\!!Hn_2hn?M7&Vubng,eYM#UT%"HtCu+eit>b"S<75SfCYR#;#5$TN^CIimPl8*-bAaei4NGReoH(+#d4>,Zf8A?Np/><p!UO\#b8F3)Yc&SB5V.Iu0gbN`C$EqQT+%]4dH?o4bU\3^fl<DF&d@/9+]jo>,rKlC$,INGb*OIE\KkkH@uN?(=LLKU8,!JQ=T8V[p03RFTVJ=85i$mho5B>p/gk6"b%C7HV9i%]%f>%QF_Ee,SH_V2"\!D/Cm[VKT<FTqJ>WcXLQ[l(*#stDuM3S(X)'6J;VS<$YQViE1XXBok]TsKlk5'B?t&&iRq7GpKCH/A<r/&%o;qJFN]38,UUh5E`BQ)(mKg);d[T'`O^b`.S(:h`hF^r?Pao$Z4D;kQMss&>4EAS.h&re\G@NPm'XD1;0r3)3VM'k+"MM+GhRnY6%N\S`9^ZE;\kW7bE=@LS+dpGAc,_Km>gK.H$Bd_4Y*7[6RUQMU>1PeNP\"B2J`Ln5U4F,]k6B:7apXFKrs235G+0.la_de>\:$53C%n9XGOC@(WW:;M\l.ubmR(&aq,ETrF*C8Mc,5[3YeNF^/L!pu'(l<NaneGFIBp2t@d\XLX2Ene'BD_UK]=H-FC0a?Hrn\,\%LG-[N%"\iV;c(GINNQ(Mi^Fgr)Z5dKr#'At1B1-SsH=M#@eS)%Di6+fq>p=f*2`*?#/Q?_OF.EnOTf5rT2+]BQ:'*%tAc:hmi38=/Cb`RT%a&A0=2W,bNL4$iMX?uVb7MIGpgER2#0=#-AgcpND!^fDD'/<kLaqV$@(fdk([%JGPh_M@A[Gu*p*[78(^SRtH%gY/%h-h9(nI^lL%mYFl(&ja;UNHW(jE\s6N$mJm))`(BO8)sKsmW:5R0?"b7)J5N4G%gDY)p:Q[^\Dp>O)ofTYmf9#DH[a4&Mc+]Eh0_%&i[-1Lm#+8%NlB#efTh%:`E[\L;k?-eQ\7Su3%DOpk](*D;So^H61S7BgL4kQ``U[4N'%uQbfAEY*k@6hc!6NfTjk7Q*:q7qNT!k(J8Z;Y;`HhY%>V\Wi\^9qU"#>QR3TctA*q6X_6Lof[>uJENULkdSQE0G.(1fJY*kS\e25d_79%k>MN7DC=dsAkco_Xrd0mu]u'aq2sSfQD(50Fup%]^X.gYk=E/?K+s>N\`?Y>h61B-/M3Yj&@OAL9oGE*6psQPll]Z5,\-F@Mm".F_=5)Q%$b7'.A[$_*/8?1KMWJ)!>-)1#l7kN?+D\%\%[\:`7'9l%,p&B"7uNC+=<0&Y'huGI-a:W*)(B$kQic7NMYQ6WH[mP^UuS^'N-AB]O(F*i46UnS/0(upM'Yl@e!EYj,\oi0Nane%X3NU-8n5o_@2p2i+;g'#mD4N%'hb_uUI<BNg$0#:D5/?B&>pE_RJ^9$6LnX##^b'%n'6:D[KulCpX((_(`FEJ7he7E9p9MQ\<eQ$%7F9rkW&#@&k``j^m)PU";0L9Bpn5S[7q_br/cN;Q)Qr(iA2^0IMn9ljhJ@T=,Qi_I9qY8<&)%7Ca`-eBlr\^mf.KPCHjA<1+AXFE%!Jbj;Kb9E'=nV`G'Ujr1kU?[8B6"6jYTWjOr"N=6VAHoA\0:I"]&":eO,`8O2@kC;BL/sHY<$_gbP@2Ypeg\t:s<:0oj`kR;P!&(%3tC-j1"HYd=:+r$'\^o?CIIFmHVf>lZ;P@GeK]k9Gem;bU2)Q5]5;%ZBAS=q,%<iObZ^T?q>8(>S!f\l7C6<ih+?!;Z`d8/M(**m%N^DqL3r9O;WoZ7"]5&l#`KDIpY9OpSlqk[lllVcG)Lt_YX9J%$**JjrmM=sCGTW%Tg][J[/YIm8.opY6dRA"X5&32#3bTAfen$C/%NKpB$-+I&URV>RXPQ8W`g>Y/>/9[HFjnS_1UX&6MQ-`I/-R/4:4+ldZ/_'-u1@XhVkHK2Vm!>BkDk%L\LS%L-DPd*VpU#/rH3&pq%Nb<cSMt+u<>or@2[1>Cu1)3tg`)[[4j43\=5Cq`g/af#dY2q#-qiq15:gN!hf:0AfYQ@cNp%h4;YtmpsCGDc:]t4o"FugD;%cspH%`+%6i&c7fChUb/R`3sJeLE>OCQi4EE,?X>Z'N6_<,am%4%ou"-XgS)je0ZHq<"<ag`QLXEc/>/d,?5*?`].98c1HaW02Lb]&gEV,%;`U#3&1dOc8'blsUJ";YA/e[,8XGF-PE"TE/-GmoelGn(a\>UW+n3^YGUjiIpRSh#`f.(<NVFR3:Z<0!JE*58&?#NFft.p*M]cVO%DiA1;ig^BXM#Jg>=M&GVGJl^JAlS<kFO#W8Q/46VQ&3=eUVDaA16QXJ#?qJh_@tu)acU2G+*eVY(8t!I/6hfO6H-Ik`Q0Oa@C$rP%@H*d<dd1b>4`a<@9E\B_s4f/P2%2D_qr"cB`QN/**.@Bg[."*7`&,Z41*iZCH"+*rHE^MY4I)*X$*f6/nurW\VHLp-mu_4M8WI0R%8aAPbp2c?_<ju3Af9S/9nnU0Rh5>$!8\E3lChgW=MF=mIq[um?>`SF+U2fOK2AJ/Z*NSULEV!s0Y2,.Yl8R:A7qFBpO2PD;j4A\`%kP@_ts2[T!r45[&p2S:&6p"\LZ@8V;2>k7A67/"0)kHZ.`fe*;Nf"Ii4g*`"g"I:W1(n@QWLGK^!W+>n4FQXHg8E8^HP7K&i0F7-%7[[ScRZo@aIGREf,`d&Nd=WIcCmBA-+'66'_p+M-$Z*rJ6LLS];p%%`_rerGX1ndn7JJ70RH.',@U?m>ktA+G5+5'Dl.<]]<A._@%jL?;3p3ig,8cHkfWe9SCVuNH*he/so^@E((<#o5]47*PYq`[q!3gRlO<:-`NAWjh!Tk^(/Bd%EAQbKBeTk`ItWnf2o;uBJ"%lrX1%:&dT2^<]cJ*pg6u<:*$_GjI@Q<:-_`VE?d0%orKf%JW!X1d4l5aPqTERa0++5?'cihOi5OWnhjeCnX#[cJ]@XW7Ha(IBd.p8tp*2%o8c+8m6f0VOs^*'on`+aoc;n'I]1upR;-O2Vu36'hf-W9iJmT*l2Xik>iC\@U$B-6bNSWt_M>/3hJ`4b%ol-e\"*(XeY**crmH#'%__P`RI$9P$0e2O!'/2OA*-+ZeLp5K0SfORcH\,6=X#tagY;=*HcQ6lZplEV)@h`QOOFss`Z_p'nl0Ks4OqX0p]2/jh=ZY]JS"T?=%+.d@2ApJQY3YG&ihb%'T`S#fBC#bIka!f5npEcTeeiolh460)VEQYUtACTtLQN+T[4%;]ao<mJJQ"S.9Nq&1l#NaVnMLYeWR.8>*%A(6ppn%;FqSiqbcE:%*C.lOCi4%=45r-9/_[5@lqN)Q;gDdFbBcQ8OATH-E6QY4?X0ZX%lHXM,B$tggWlZ2O=ZX])[H@6HlB?)FG%Nf(fq+_>b8G0Kp,;<?IcMR0:1RA`50-BCl'SfOT/fDZ!Kcc`Ws7+5M5*DWlljk8+W=H!U0Qk]FCH+'%W!fOB0A)qmrfs.Pm6]m71%SfORcHd$fs:m@\iI01tba">VtOc0<Z4Cj9Ya'/(Q*/m&/6I>HX6GK,*('!%A&V[=Sou`r2B2;JbDC_U2D[hY*B05D5fjjHWs5CGn%6S5V>p$>7^_]A89Im&/Vfa.FtFpnn)ibrJA:2^tL7ih%@Qf18Q=!Sjdp$Bd,Ld?HZZT;S00[u6\iOK;f6^;Ydo)-lFd8VU8j.4[\%BuRTGKkhb-?H)]\>1'<KN5tfFe"d`=DMnC!`V9s>3#o864JJ9SMA>/r'#c]Ak8R\]*dSU<<%GsYmN@rj`OL-di,;VSLK4aX[:4MU%hln%s0g6AlIU"Vq>I"%$MX_;98Xr\tGauqQaXbA:FV]bI="tc(GBA-Gj&QmBer9W8`V:]k&&tdiBAt3J-EJ&.=5!LX`V@dFP/aI<%+'"XaSVhE-&qsIErd,C?Japq5/&n!5(8k4g5/B2Da/Bi9pW`P+/&qOmf^Ddu1J+KVr:_\\4Zg6)X^XCtp8;%JmR.h19%/5m0g>Mh%gu#%IT=F;H<lK<be)i$\)#%!Lr`[9caOu2EXr+&NqnYc/a/TsuEG!ge.`OVaG5YU`GZaXfF=YAQ*g3LMmie]?gm>SJV2Ff)YEhtp%@bdUAqjiW7Z$:)p@Q\7NGOXi^e#jO#P"s8HPZaTZ@Q`QVm(Z@O5!m.\WFFZWc2(eI(_>(Le#aIZcIl$h.`UL]81(;Q+7`fhV./6I%_b=a0,:^]#^Ap%>MX`[[Eq5+XYj]8#[pjaKM[$po0cjZo4O&b'1)@3.r:_\\-],e%=,aa8nIUPL7`G.am/K\s30SH!`db1$I!@3W%;)'-%hf@usj$^dYZBQ0+@bbI#I]['A9_PAg0b1L-f8T`9`V:_AO2\:>O*CS*FN+#/Sbs5_9[]mXT6>@e;]AI[p.Nrp:2RMIats"]%E!O\_:#W'PLHDp&0uieElL<0*9XQq:W=?>g`I=LAgd)G:bHFp$]-G&IWt&M,<'C7^Fh!'/:hBU4Wl(C]n9C5k5H>9<C;]GPf"Y$%%mW=>5'S!/E*-%XZiCrh:Wl+dTjmQ0(a4pb]@<Hh%%l:?QE!NqXHK8d>LHDp&;uT[dV`NUIn#,hfEN6pIiK!n`l-HEJ"'6/5?6/I`%L:d"d;m-ZQ]q]ome`!)?h7lu2mTUA)V<W#,Pk7W!iFZem?!71he_u(i^8Y1hO/h00mOlqS,4=[oXm5D3>m+*-%NejH4I'3J:2Tb_%^*c*j(MW7)M,1Lqi;K8BFK<<M<LcU;9irG(8?^4N9YEJLhX83OX2CM%R,g6XI_=rb7l/MuDLSKEg_mW8$i1[>_u4*@Sa,]0+(jfg%iIU/r:;&\NL)$1EFa3h0RA;l+A6u-<*U^!Z9Q+73]O1Eela3_14n\]e<ZN6mUO0#kiD+67X=DL;<ej2a@ah@fs2fO&m/)q?'M6I+%XFYR93T*a4AhEo_^A5C-nNHqFANq_\qq.B5+`H^G2&n1akY/hf^;@Vbm$:8F1)JO,B6W,:<m'<Jqc>bP90&c^.K$G0Agq@P`T!G4%0q)RhX#OUZg#X)Tbi@OW-k5RT6)7t,7uDk\XfP!*rYTa7;a_PiP^jjpkrsU@V4+W54dKi??+MWtqtpJWHL*V>4/I/=iq.XsA`NOW%-RaEqqEJ4'VYNTZID(6@5F,asGnN*02\ZseSTOMJ5-u.WN>XAXfloQ^f^]Y<gr3sfR,jX@nWTbY<+UKnQEZtk(OO!Xp$k`8W6/oU%p3*Ou)P_P*R"3#FqXP5[)5DG)eE96:$#&d-E,gin*uRkAZjX+"!U`eQ,GOm+R+FB=9!719@%.C"q7PIueA(j(0\nB#J<h#bm%79u%2%O/D,:jVLL,Hl0ns3B@4f*(m*fqE"PAa_Q.,e3Fhasq7Usl8)PIm,nj;'>KV]Y[)W3OVh'Xk4AH:W4YEu9+f\+bQ;OJN7lqg-52%!mFcqA=Y[h0)8JmTS3#D@Q'tG3JMfDN3U2\<n80;[^e4@MTsM-kn@.5#AbU]d2,"ZV6RBejt=N5RRWPlU;S>;XW'^!khn$u&)7X3%Z<BE2-iH(<)]#Y7('QXO*fIG'M!ICd76[=,Fl_]\bNMY?Tb\Ha&ltY+Z^QkZc6$>`@9#HdqP@JeCk93Y")!,Ua1Hs5D^^O!SI7sQ%eu*Lk"K>SFQ1o!?Bc$;GSK<iO?KDKt]qOs(BlR<H7aTht%un)873!38V\X(:Dh+MhSc-a_'UQ)h[g&/=:moG@Y=3`W]H":'@a#Si%CK$R@dUlSnb]R<JA:c"mRs'm(KU`Md>rT9`1ZC*\PJ=Q@aVB-_5jp5kfe_RsO0@jE/5@3[N2gc&U_5Q^UWBmX*&i8&4uo7"@S`[U%Q1,V+@#o:ceqg@!JD/Kpo%<fc"pob``3TPsM,A#0*MbX7.[78[(I@5+!#:hf2iD^qVa?oHcp*i#72RRON]JX?`iRkN7pc+R<J_Q>%eI9=PWLe*b(lgTE_6r_Ug)/^8T9g9e2ZFTG=/Q\L'RZOVR,jbf;RIPrqnU.N>E<uA<ZE/bNBV-%X@S)SB:J#Ho3fU#mHtC7S_`ZU%ZV8(&gZb0gVf/21rjdG+c/-F]C:^I<7[RbSrOD$l"IeGFWorq@3>[HeN`dF&@7HCH38E!WXRX7Z`Lb:)gKuZ["kZa.bG8n/CR-@,%Z/^rO4SYqJ8"8Vp8^-b(N$9mdY(iBV_!jB[B]^C0W*-hRD3e[\RDmG=YMJD05K9^1[rl^L($e,Ppic\F4(Z$r9oV,/_R&,T`[?f`%2d8"4Q&$65hi3a(0j>'_*Cd6-&g?<&jJDP8ULc[82pVT3I]kQ$=[*O%PQO*:nFNa=HQhEN4TVG]HX_Rd#;5*+5">a5rpNn.qr[^a%Bgm)5GA(/7BM[(OBgl[l3#8^<9e45a]H4s7a'mdjAhD`Mp7-4=[;W&V\@!aIIeIa6^Q4TAO&<Z0SZ(R)>=W-Lgh].J5"6M&Ae)`M%?&6ScofB]#g0]dRF/M678C,]_b`!cEn`ZuT?E5o(X\-0qP8]'`T+)oKjVp(Fh:_QaI57*):+bR*aXu`FSL';D+8Om:SnV9f]dZ;i%Dub>K#m-uh=sc[u:@ep;L+AeLT%Ap\i_tTQbAGC(3p1QGht`V''b8mj[OVQjGdar-F[!V+kWLddZS3fak&4nF_KD_WZDD<@nl@m=%G55H^B)/3K^6VN+(RV";HS"8(H):8G^XaHj(ADRD[_2Pus"HO@hd;ho)&I(ppFgQ1rpk5-:O]](NtuN'S[<cio_ke;<KB=e^>;UK%%r7N#G4N$7I<3MQ%c8p(cg-SVh6l:Zc0OdqMFkOr(06b#ge3,lRqF8;n"#`!SUNMCR9Js#L&%.iG-/HDAEQ2/QQD/:2_3V)EGFfd%^3Pt)h_$g.m)I%]\%A1oRot3s4eCX(Vi?u7MR^PBm.M31>hp=bmTfVlUiQ5%jKmUCDl:4"c`P1Cip')q,91FNgu[>3+t4XinN@W9%b0e'J<S8uEjr;J=$7XhdO^;;o%^kRo^julREca_crZ`4a#;.RX)qrM.6TiEW"c%6,Hti+uB-Y);dW5'#r:`VkNLAj:Xhfj\T@`\l%h49jZ137e_\2&Y(K=B)&nj;p8CgLCcjHF5C]*F74Qi!8H[W!e8W:DaTX0qLV(<BjbCp'UQR3\N)m&WFd2"ZE"$6S)rZc*mF[G1R<%Qt,s`Vn&>g]Mm;RS(i-Kg!92D09Zo-o(]i,WqJ4%fthsiQ<kAE8A'FQ(`&%mA&l6gI&"GRplnSC@BOo03LG_/:HOWZTXGlPK=oR+%/tS'=bj+A`4$;f&34!pYHT.-\QY,cPMZ`lmI3tKuc=YL?$SOJ6>;PNpq:!P[-)2V<Utir>dpfT+Xt-;bj]5cijQ$^>0.+59HTCs+%rHk#c;9`tED!\i"la:VS2:lXdojCb.hfu>>'_4&d4+HC5NC(=c`j'@KD*]hI^7OE8eP:IfG]U>!^j!-3hoZlNJ"M5HX0/b`b8g<T%q<$qJC(t]@dS?^\Q"co!-!+-*Q-.nQcMG?nM#H:@T*.k>5NpG\FQ][[Hs1BWYh\6d8+*[g367XDX#IS44*-'mlF_LofK.g0Seh;>%hpNTp4L8g-9^;GKRgP0E1#?5441Qm?JHp@*h:1?8HT]eFj2ad]kM+::4OZa(=L.BQ2jSWI0(Y(R@N(`I`gN(^?f0OIr]E+m_cXkV%b+k)6^N'*sqXG8SnKn<9<VtFo^&J"YX5k3]%09ZYX$JOqcc=0NHb:Ob+s.d;jFP"m#=e7Y7Q"dY0+?l`l1%U<G@&R&Y-qE",bQoV%g?lXuatThW0m@ao=P6hAR__pFQfn"Y_`\1[T$)B48M+,0UN^_94ekhH5NYD6[7"-4Ra\lZiA8.XZbJGc8Li"Z(JA]DZ[dFe>L?N9%"!b4_^Rm[2%j(EBrLF,ThYIJ,s-;KRDLL"5pq_@s#$IL>5i`1GcXZD&rM,9\=dsmm<p%-)D$6/`iqHC&=C,0:Ols#oQc7,47bTZ>%'-93Z[n,f*_(bn3I'Em'nC5F`#RWu/l0nFPPt;n*oY:PZh&dM'IVIJ(%Y!j=CIcILrLlHd&#B`f(?Sj(3dfRs]9(o,^A#^M_3@'R%mrSfS+u$q5%EQ7;1TTf/dncN.j8++DI6Mj=F8l9Y:_*,M\)%2=]?OuS?`c3Vo$6V]Z*#Y0^2JO2]'JNS\b)^Y3RuD8SQuSc0@tAb%hQLj[PLGF[q=FJhefr-rbhtq]dWjJ-WoZt`q0W'ZJ*(A,_$><PUjFn_?@A%+O03\cQeMAN^>E$QdGN^7/ZQ74oh2NSq2^=&S+ZNl%=TM\"aV7JAY)!EP+9Jj:)Xq[W)kBsMG[&>U\D27B@edJ2<EuLfo]<X#l0AmQEj\^*AU>KPhJ]+#i:El0c0*"(Rf8FEQ#it,A.8G9%C)+ge4L0?a4f=hs5OR)5ns*Eh]=3-!]\VB+^mVbH;5EcnbOk^PiHV\/0XX@2W!?fm5<lj,='C4m1,!D.j%1YbcgT4:43Ye#o%e2W%GTlcT(-&sF'WSXC\,,uImhM,W[8H"roD34d)_l_2lYE>VL$V<FnJ^n[;L5IS/R%s\@7Jb&)oN*];;ZV(]ucufHgV@_JoXffd4MTb%\r-*'(>:Rc90hBup1tF,Ps[>pM]*&;^5FN%$>lF_?Z0Na\a+tB2ZeYFM;7)P#Pgj[lDj@Dd@10LO&\SD/QS[V-0;"D[-PekEc_5)%"b/C&`l@H,/l?6A*g=g>I&tr+ob[9A*cWW-+9;MV<c:4j-?l*]'['QHa_;/?>5h^>.s5aNF<bR-lF"5M_>a7rs5GtM/0hI0LjQ8]%&$#Fpk$eMRT][W2>?h0"(Q1b_[f)_3J"A9^&X`0_qWG+c.S8?[[a2E3AWQS'^37*":%03i?I&5f7>3*brB>]32>)%Lj7DONI-]R"%J1mC7V8Y_lc%9]DT&3[h2t-@9rDIRIQ;+f$"Ld3'^Dh)]K13(=^fod)n![1`p"^l`eUZ\Y/7o^P]EjPfpW^ueIp$.+,]Nqc[;iFW%f'@.iKB!&^:c^[l#FjJ&2LeRU4<Mf7&I1t>8^B`qC:kQ?-t_2<PKS3)'TF"q-rqBIM/g0./%3hoq5iTrm"6r6#UFVF&q<=Q:0FdU%V1!;VZFI1k^WW*rb59.uH=u,7R<r^N\PoqXN/U6pab-HeL,o:J+t(?k;n5.$g_GW4$Z[ks5bWX.LpO@KIP]^'l!6t\e_4g-\]]G7%O?7hl;@362mTm36Sr2W`jk%2j-fLB&_l)BbQ2KlS0nmbd:Odk^rS!aQfZer4J%EUOJ\I,n_4MF'V9P1#a>^WT#nMXOZE%a\9_fG\%VX^;Z5NY4l0-7q,IP63rF.^T\1cih!b1F*,*`+JK?.Fd_!`<'J!;4)_9=TWp0=893]2C"e!Bl/>-?1/W+=TZ'RG3/3@)5KUegTfV%$A!<Wr5f<6Wh'9VfM?IGAj>nOX?KDpV>V4`78TJ)-8&nOk9mZ%3UpTUnZi.d(SJ50KB:.!BVO'tH$tr?=D]=u-GDZMCofha:PQS5%Y?4QXD%dbq%?\V)[Kd)f%sN?L_"%$&4_*`XSjf:2[eNZnhS[%_%!Yk<%jUbM^?Du65rjFdln#d@J[D;>p"H$j%9=r#DPP.J$iKqb%S":Mim\#o9pT&l<LgA82'c6/V[7C)jigsPR%WdZfZb2JRY(>$IQa]i9N`"!ejXsVY>(q;$[_-[(TjAZ6;Y?R3duQ!j%-52mgabY^%8e!qT&a,/kI\mX3Flg!^&*((tS2PD74&=c`I4j5d&35diV'aF0/U0(pQYGNhfpm)ZHn&E1YF[t)B]"s1)Y5uI::qZhaG)'r5P]k@%HMSaYS#ODR*FatgR@Wg%g^\WHX48]"baNgs>q4C4r.<7?G]4kpA5BqHr97@^%aIjnJ]8o*`>?Y`>?3u6mA<hqZ*Ui@C!Fb\]sIN(%Z]h7i_"#tt.Q+Zhh)N(?idKbRDkWmHg<o.JR*:IkA*Nt$>c9u8Mtj:pQ(UKbQj(8MgbcH9s!+^uj*3X&l>Q:=<@I%*M0Bf/>M$(%%7;&E0?\ZVDVmLfe9)_5>1jqK$U_!BS.hW@4X#X)JrbUXd.gr$qFj3)j`nfHRDV+!&qtoE#Qh1D8/$j;j^L',W(>cNDkNr7n"neU-%5+"K[,-l^sM/)8!I_Ka5A_WrAdc@66H?HBIlM,b/^3,En^^jUgj`HXBkuP(t7ddqBZQl[]W4rk/jdWRa^3=SaeTuT*p,iYTbJDmS%<s3[hA_-Ch"\3kc,PTR!L_,D\8amk7apQ=kV=jT5m[K>cjCWoda-uDXE1#.R)/jmt_AG;Fd'1F\'6)u=k?r]%2NFe>>WHM*JT#tB%S3(LmIMdd]70.HB:H2'rTtZq%OTu]>/J)^4WkZ<@8b=jZS_N7(p4R:q63t=%_BaQUnQa*^q7cIq!o_H$;dRo$2Zt4K3nnu@g<%4B%;1_Wr#XdjEAk6AUja2l_'gBZ'M=)I,+b`C/2]*um0GB;khK*<&cZKdk9QCb,+^=<P5`&'mL"$W1,4Ye+Q"G77_^=h``7-(lB&:D&%Y4,6k*fE:`EdA]n-Tn6d?n@NrhB)j!+/"k5]0A^@Ek;0::_Irs;^hqtnAfoID&9q@JOhrub""Zq"\^[TmXE7:i';`34",Z^S0"4f%;)7a/iCIfmohQp+3g-tB(7fEZq]]b*f.#aMS,5[E4[%MG^_G&(X4`L*jorrsSIY;J^/>>J@YcDWg(7%n-1If_]leMqI>.rIK/_RO%j;;\"o]G2`G^4&5kmha^XHCs^6_3cik@V'tV*!`!I;RnVG*Br\)@HS-nO,DAMRf?ld$\,WJ?:s/TQ,L;@IIKWL:S%$c`^re^"2:a%Vcf%)IC.\>+T$f_]7mRu$0_$,RJei*dr9\-]r)sR/C3Fs>CJY#R@BcH^uR5lZ&G9HWSY2=PouspYnTajD_RH;V8.^@RHh1A7AfX\%P\^!5@]E$7;isi2/EPDlUR:=1/lVRJ$;Uj'\OMX\cXABb1"CDi/W?\&mUk0g`?7<TXX/h;a+YrtQ,QX\):Bqcr;`^`&X:bJE2Mp_%miS<mb/[EZfahSm\!JM?g(>P%e._M=6^d3_R]/D>ZFcK=a6/uia"k2\(MT"!gaR,@lS"$/WlM8=N\Gp\1<eD^A?*K+BbXL^r!"q,%g$<jDT!HAAU%^/ed8\M>MTgMl;jA_=.N_=ZBE+l'(#bj=7l;LM)p]N7FbYYr^==#G'>sa-Ac1>Rr"DeIp,.Y7r4lA4##k>"$6fk9%WST"1WY*7s4o=9,^RYWh?+b+P=NZuBOQTGSHj;KtMb9Al8(po[@V!di#s?Ie-U%5*(G,X*C/-u(K/rhZ:]Z*&0;`'H7&ubl8T#-M%s6NJ7s!.E]-4).Oe``ZX1l>Fi?O\Ij90k3h;iroSY9[VFj:=$ggg8]Bj8+79A]3VdrJ(?-56(Rh2M.ntQteCkTitH$F3T.F;r*-]%ebe+r=r$Z,+i\gXVE.NDTOF7hl2#nIRB'/]Wm!!X+.?r3r@(7:VOf9Hq@6.-F7M^b7;:d-85D7P^DuD9^"6_,Wb=OaB7Fqrjle/"%9$Do<dE.["&DG^LksiWD=^KBZcJ<p5#><;X\iNSF0CIXIjJ=05;5i#KT=B.:JGZ`bZ?O+;3Ip:S*.ISF`Z=WR>ba/LdR81Q_"EU_%P.*K5-a'QqGYc#!b2;?r(=^(+]kMrCd/VTg45%5F4eH%fc]U_EZ3A$K'B`C\50/%sW`[!8Ds2t3)iO$i7JRAhHUPp6.!MLH=)f&*%R:hlFZa,cX:"=3N'C1Jjl:1'#:$VV8dUW8LhdadBG8q!k5FX01Ku]WZaD8t01BcO-5dhqoDs:p2/K7r#2)d'gRjjn6A'VdS+h+oB%C_e96Op;^kYVBeSX3Zt!\s4e"mhr2CoM;c0J@)hkgXs(jQJ6cNgt>'l(l#;rd7sLc3n:V3$#96@*jYB&49"+$<\b'8G/%/(DDd4D%!oCBXGP32dqtu]$(2B1Kf>IIp>q;8.q6-PX?,?Xs(2&ihETqk?Y_[(lDi[!W"F9`B]Y,9>GHh&5^=Q%1)QCkX`p3"QA*@P9CLl<'%pg\Ed(46(`ml*1FHXc"V<uNsJp,uZNcSoTaDPqd63B*;&hiBX-_]pdO0$kX7mVPTeG=@U_068KdP2@ZgUpc0X;It9+J,;9NFjjRN%l..@X(4*No^2H-X>!FqGn&)b]pOFaNakb8?9A2eig:p7#II]DO'oD:-S,VZmk!X8/l)*F7RVjZ-S`ci=o=hW1c6`!/"^Bm'Q0$b=%:k*[*p>d3Wc+Yn/\CUpD6d5"0NF^/b$[>[[acX$?n'/Ls*,l_3qteBdc+W+aqX`:k$#"5m4MY6;GNXjkrP7.XpFI!tA-8/ERL]r,%i`9g?%<AM_lQ7X4-+Y1<lYN8/moJ3l<jnU_@.^LD"=5DZ7d?[G`uUqCr)`0X7H=VnFQ`43Z^:dJV:FX0j7OBW</tcgU0A)!:(!I[%Y4>H+/V5>R@In5l*6LUWYi&PL-7R8\m-WNsjVRas\#XdoO?[r+1$%'GHbaZ7$=2dH*?8>QXD\VcmDTSCT7d)Hd+qo/\p`nXRJbcA%^[.TSe*<QjHmA5KZ9=KI,K/qHIZUT@`J<`p.^B'L)+PR7YY(olmqm$>;T)cN*)n_`a'Jt(U\<<=dkf[V1=Z'*HNo@E?&L'jG%8lT%2;6bOQ^/D+CNI1KQ0\)q"]:kl.IrM08J!fj>._b?bjCKFLIKfA,J#nA]*]T1euS/*apdaig1$oRg8Y(&Z-5fUq9;Wj_-7AtWIF7l%h_`RArdUF7dd<uR-0lr"GAmS[0LKk;lS.(-)^l+`1!`d-L'$+gICoOOZ[]5)1nAaB9NCEEF]\=NhWX1e80PsF*K_V9ET`Cja7[d+%,5A:0/!k,oI"M$^JB;f$rolPd23Y./41omuN'DW,H2H%;O+lUps5B%0]4X3NAtO"D?@I.b,LdNTiYPAI](&r&I1IWN(Y"C&Uk1cM%SC+_$bL*(&qdGfIO)srd`I=&JpZ!5VS<cC^dee$E?I>$&^s`+"No"I>a'!^QcI'hHnjcf.5L.ZomoTK:9CKn]HLU]YPbg=*UUTj0%k=-Ua[h)gR$R]k?ID>UBcVJId^YN3U4uthf\U7PZgY4B*ej""hhV.nr0<71`Y?RLN?PZBgS6Wcg\U6EKe]m@(b=u^]lg;Wa$_NdR%*E^#Ga7NBVAuj$2HSTs2o6T;DE=ENWJ`!2#O1.mDn+kG)@C7(XhL>"ko.DZb\`_]`hr"8,`QGNfIk<;qhcW1PG'@ubhT8F6&$@Hj%o&hCd\'E`TTE]lua*mhhg*I>P2@FFo8j@W@Fn=))f<o*i2t!seM)W.DY-Kb@I(2>'\*)V_=SoW)@,5+_4abAB>$O4?m*3G5B@le#%E94t4j7MO,`6<I\`RIpd?H(<:A,4^C^Ro$m@t"J&SU,XZ&>&KOPHQg-c$QJr?[c:M4MH(#T"d1/Gp(S4?_1Tm&&,ZiG5$T6Er*Vl%p,SSfH]Mk.IRC2DJ'?L5QTGi?^4[K"F!Y&SU[ZA`^K^bU9Q.$t5N1HnhAgl]Yh0/qXrLggZ,n[;St29n[WVXE+SLBGVq7*R&Dpf@%HKj5.8!DU_.AQ>bd2KO^afDadXs5#XE`11&s13N#EqR;ehrOPaDTV.f>OV%O_9_;l_1plnqT>N/e)Y3K:S'_T=3oHp7t8-BJ""8#%nc%\)M;M(`c@;9%aclSuj''GDgo*sUp'V<0#0G/$j5]MoCK&"/<j"Wuo=E&I1/$@,l);:DL^_RU:\RJ_g80!t59q=b4"Kc,^0Dk?%rSA1?mPjdnj="%JP?3gkY!73EoW\&</5BbD?9eJT)N+T_VJUM)nR_Ick!tm4B886SQ9`<?4*B_&j*83r]X<PB-Yi5$`=(l.3`b-^%k4kX.J$U-A>?\N&dLf&6>/,@]`G0V\NN![(q('%sl<gS[d%R(S$jOa1apFT<G3Xrlp;[N0R1K51*h?CpIVX7qS]&Y4UHb?5H[9A)%3SNlb-^X+jaa%5K,t7=[OnC**l8RVVij:c?gTOjfH2hj[+\<Fe%I(@1aY+2M"[:u2.hCK284*>=O:62N$/0n5a\^dhqX?99Ip3.^%Wp16np+EPPGhf3pIo8N1i>qGFm_1Zg,h#U1(eH?*&<=Jd/?RkqKTCo6o=1r82opK[E-$']#&Fn%rQ.5p@b&cd=$=;C>8-i(I"[b3%X"3Z2pt5KQWL&B(djBIQ`m,9&Dsa4WLZA7&b.H3]hrN;,GE4^NlHH(LkLV==5CS!(`h,9_qrc3OaH1_Ro'YeJ6b=?_S1r,J+3r`E%\PbH:l4K$Bi0f5mrX16[Vsb_19Quf*GP_76FdVnFB(C?ST#ADHd-km*P$N4C?[?bOFEcmZCQRhU,g-b9nGLh;9cU<C;ljT_Dj6RF%N))A2bY-p\%UT%Y^@^n2d_1DGjd_jlZ$Q;`ICXf?oA\d8nMM5uV*SDUZ7gI_0'VsT94D)eCo85B8_)lW,.hUOrM0?++(-(p'D1h-%]VsoYI5pn/q:=X#X-NGL?n=D/!*`A<:2c\mj;b)jq^_-kioU+$f!FK;oT^)b`KW7C:EHB^0&L#!H!i)"(E8^-P-8uho,fJan%.i&%n5B+<N=ugD>WD?KX8EGG:MTXdi0UpRRn%B:=OI!DFe7:6i_15dn#/TMWY"5"lG&@,)7%=re#7!R^R[p/G8g/&[0K3N4)sic5CP]f%p!e-F;IB:fpsStB1MP?ZLH:nq]mFOX.O-&.e,%H:95eOY-[/.+h*7:Wl%972q;\1;FaE`Oo^!T9=6bP;#Fp/Ro<3P>K2T?=q-!9T%Mm%]&U)gM017DPk4s#jTr3><i?TS#V_"GUa`-=n7e(N3EpGk$U90=ZeNM8X%=)?QZ7rLu>C&C<oq\u%dT3SHnG7[7BX'7gbqkpXa%=Rh6-N8J9k2dX1%6GE3!_tU"6/*B.4Ib6Xa1Z;6;fSd'nH27;t[:>i\%StqD,)+I9q\j'O6`?h1mII_J2#52,VNB6ZlSm`FgfiRQ%`;D29/2Vo*d[n0tAP(%\l/SC$mJl5&YheYA+\P/H[DVJ$?hjE]olc1E*$/'0j2=c!-a586>6NeFm*t'rDrB/qR^)O)0PaA]15\"Q%>hrYspH)*#3R4KDHPX@<=aU/Gi0P2E?@Sp1F)e;<OX9O&/?7Q6N,L$^)_XFY>b@r"jCd:taRQ6M*rM>HDqog@fBOGjFun@GbB3<Y%]X`3,](5QUX&i^^Y/ii,al5f#%Wa%;p#P_P5Z[j/d1VI&I,WYD-CRWCkHrK?__O<f6a(h7Faa)O_g=CkZLin%$%DX4b*TI#:Z%5J%8k9fr]Ie<u;s+2I<<)Wp)u!IhN>><,4So"+fgeuoOS,6-Y-A/NGq$^-*cJce4a-9dP8>O!CRS5"cOe_$QX\e"DS!h:3:JJ2P&M`e%2qF!R^35ZFp2B+,>rm0&k1\",o5"=Dn;[-;_)a8Q5-TMDQCclX@HXI5Jc.g&Qur>i[h=mb^Kp`N[%sH5a7dsP(1O9?I-^1grmK]L%hV[&Y98/l4h'lHu&$2rfId9Y_cMGbOc<5SkN3<K$R=b,*a<1NYb'7cLcl[#Yg09J:p`C&uU455sH@+bW'u.8-J<$=m\+@?Fo:k;l%N=Nb#Xd+F$-ur$`s!AuSes4Tg(7eYk_?:Rkli6*[l!&<qSJ/#`m<kj]f?(MB:S![hW7+h>?bUK*BD`mKCAk\km*)<VVcQs?j3,L)%mM#=hg!"a4$/b<J4+ph]2ro^AmB`!?F+*S.lji^d]HL9]b:X.m5=e$\/ag`sg3]DTXXmc2B1RmNZk(dXBCD;`+4@mis4r>(LY2VW%ru`\qrp+7f(Pj,rmi<$WQld0p:C[[gC[UK<Io)^@6TTOLLP4m_*eQ3YhlA_LT%8Ag-tkS$s!7-8$u)8fKP^[<I%GKjBc#B?Y<cIl%Q)4?^Qi1QXbS_nnlj<7o,tRrAFr>a?ilEe%Nq_P=s(m;*SXk2>m(\p1ZTmVn:G2P)I0jpYW:K(^Ac.K`m@++Qkh!,,^R*$RMp'D"%O8lD'fhiE+DpBY8q?pPO2;V]=p>iMDrZ3QX:D.r&QHO`+-4b;"Pge;Aq&`E*As!u`G-@KBphhSM:D.rXqEL8gEG*%NdliN"eP?)r%.drE2H(R7U:F#mkKf@>FR`k]&Rru&58V:poGt3em8m].k5$;]":3V-0[o*]bMTB"'InubaZ!YZ<pT_W@qZ!KjbtU4Chsuhq_u"\+%H^Vbfp.[RBs&2]]*IiK\c]lm0ao>[fr*FY"f6;]@H(k(8*m5(o^EQX\pJcU6%pZcSEbsVqQM]E`V8qqnF8u'OqVU3"P3tQkX4r'h%^I4aPHNX3>DfOIn,k<l8hnP?tRkkrU4BF2M[Qg6(0s^oCB4_""rHJ:tQT[8-Z82DZVh.>e=">3qe\2>&5GP6Jec3a!bjmrSr7V'B%Z&=+Be.4O323l@'W*di]Sp.2$P(,7QqSe@'hg;AtU;Tj(ErD*"jtlh`5FHXWci2ZHEj^*@f7##9k,R]4?)2tFhN++s3'0UKeUPK9%3.L5LFqlIe8^:pJSc<aAU&+OI=kE8jWR9]iP]\Q:]PkFJb_f%>cbGu7#%HgkE(Fkh#Ee@mB2I=MaQ6%nqdo&"Rk:roq<sZLJ"t!O%+TMBqooE/RgZ6+VVZ,!"s#0]AQ`5JF'(3Kp^L*l;<F4QHjM,'!ral*'^?!%9VZ)\eo54'U02qmC`M3=PJ%n\U9/Y)j-ia-#oac9+%h^&7#1A-_%rjU"!^J+SF/Uds#n!@1%U[KB+rUNTOMr-i"qdo%7ng2"Arqg9l+)K,=P5g!!qM4@@h^&5e9!L=!.FnUQ+!jP:RjZgC%g3!L/rm*38^Nf`/rK`(PCp#8&Ht)Yeq>-fL<V[M_S1I68jn\eg#<]Wdd'A)j?t7ROp"'Qn075ph]X.Iq:hA=2Bn,MU=PijuHRY^;%IU@N2r;1W8\i[rEZ]a@o@mp8r'?+kR_iCNGUiqe`Q6`6_ZV$!i=jVAU6'SI3F!$NTFJd/mdXU'mY?uPFn5Do(3_bLimYM=DQaTXo%>[04+\Z>D\NfG3'k3a\9%Th*U9eI0dh,`BN]f\Oab5"E:aaNmnXhHj,np^DsnVnQXVr-@,?Wm'*!`H7/2&Su8\?dQ'7T)2j]5l>,%5CDT.$.+mfK9ii.8,,$lXTjVYr'LY_AV0jO"PC5>@;7t-QgYNE!9m)]5nX3eVu"S+Ac',IJ+iO2+b07B2$EL>6U9r1k)+T6I0F[D%VNe7@?]hk0^Ye$5J'@g\-K$U9NcaBj]5-/kT#`=J!SUd<omC7rjit-4O&k*i5C0d3iii5*.sZiMSs<r#rU."5oK`_jfDG=.dmq*d%\2:$LLm)-5Xn"]01O&drr-$7fnAZh+J!#nBF`Qlck*O!]pJNWV3W87Aa3RZ744OF/=\S&GFS^]Dq`A;"HKO:d>@0?c3FtVcRI9\H%Sf=5t(L:),l.YjS2MZ"R\4F]cbqEEgTRhI$ZMF@ap;Z_(g&*[)$hBpMre(4mq?<_UJp%Vh#C,:JkQj+R:eM08gS;`c-^R&G=a`C1%noe[Cq5=6q3!JO&eW&=M<u4U`8DC&lp@Q36)G^$k>15\f+`lot%Ir\]>?Id&]D%ppQekDcr"&br#Q9^u$2Vu"?+@K8n8Yr,'('Rq%<7GF>]j%^,\ZoAkWlPLqCJ3$okfC0.Kqn8NB[F-(J'U%L9)gpJF_'_5Q8&VodVE1<J((I*oAe-MI_g[sf%PB67!h!r\l0?u(hr<V%d4)h<<Bp3&#KF>pkYrC,g5N#un6+5"?1</r3I5V&$RYRW*L-ZfeCY^%K?]EpA+YZ8XN*eU6@1ffg0i:)VniL;+95SfI097a+09+j%p2OM-%u##\GsdZ83ucQqNk:lN!_DP>($J0@BF3qD[WD?dIC[b=>-OP=CMu&UL)NQNh,9^soq3*T8jt6r#eaBis3T>U:!f9HDJ[#S%\M#a^%XhmsIF4-Dd-[$?grBsDl'r4k=:lLHX(+D%JJKF6*\5L.XAU%M^6:582,+@<89<"2NV*&#dc:S^c4'C,N"'q'#jD-A2ZVQT%[Dc\NZ='ephB!P''4L^C,;"IDZsJL$6\Q@,7RO$Bcuc$UHC8oA0hYH"fBR?o*PIeiXtuB+:)TK,qB+RUpmDC*TbXGu&8#4G.u(4V%\C8UBP7U:@G@PQ:-4G#he#TH.9rb?`TY:I]Ws;!$RUhjNZ,M)-X3M6o4;\]gU%mp2`a3(8cnM!TG``'0"N_]noIc-b"VMgk]Go<E%Q4]9N&LS;U02i.^4b1rOOo+EXV.f,_A5F;<UubT/<j<e;,Q[&R,jFol5;PX?0oaF[BsP9PL$6m\RH9E_DrX8A*DR$78"9^J2A@;u%#"U+;q?#50QmBJmp5g(u4ld-@NPTR8JK-i1oB9J%e0cEZos+T59faF0V]eiDE%J2ilc6]:mb<l(5a/5E+Z:j.OAS@M(i@HiJ6%WI%X7*=6ND[!J"rM3l5k8#2+LI.2KZ$OVNfb/a^kesi1km/7EW&33.#[,p!'K;d1[PFp;++3Y\QF<$!9N'A6j>m^Dj>L1KLP2oo.>Xf%FOIURP!q#04m,A=U/HW3W`Y\dh)!Ai"t?TD_Mc`S'GL1\ki6WE""fAt9rir+G@Ps5+(02>d9/SZeiAo]iU.s_U\@*fWtM/uLX%b?%`-.-$"j)rrpJ*T'acJD<dFWHfGhP*]3D#4Nr*`aOnS>dln5m:+J50cZob)JDq9Ua?#p7I5=JM3:,ho=F!&7k!Z>q[kPb)Bi/nt\0%*@Rdb9?-_5':ip2U^>'+AZ^XIi'#e--.7$J@m]'f,sqp4p:[M1$&DN-dO2/-!_nH(JCSq=Y-cVW_r,qd7+4gV*>0W:NEY&D-qQ#H%*q]n2Q58oE-1e'f;)G/ZGN1;:[aC+??bU^LcYI<l-0Wm'-;0$j2]4UI0pYR9f,<jInPMS]iH464[S\bPAr$*EUIfSsX9C&q?9pZ8%E*1sjQ:.#R"j*`[#h&0hH;A7=cm_X%8f2\CHWQDOnh=6=B@,m8o>*>SJND>A:1`JL0rSp;F"9:MnQE)?6@cYoZu4BBTmTTQk%)ab%@`$jP+u>Nq)RDhih+j2WZSMbJ7nXI>fi2[_E"Ee$UVRpeDi!1<oB\T@5!'`">IeKW[@"Imc<X.WMN0N#STATp3a1[[6=QS8)$Zp+%joEmJ?5@6R@CNT\XW$h'q^bINVKj+iT'R$m;h]=#jS>QJcoGjY&=XOX^8Iabj5iGWg,eQ//V^jnKo2"T0^`XF%1tXWU*.%2[1##9%JW]3]l&]L&P'-n9/L`=?8T@NAHWH`5mGC:Z*,R&@/j]'"*lfF\(m#R9".jTa$/udl/As=]<q1]2c0L7(0Lf*C*]t5Y9H<]kd'I.\%e@^8TDFEs#%(!M\;2.=X'4E:&dSoW*_,,TJH;.a/Qko>UGZ]7^%+J]*9IIqncZ;q,N*RrtNY5I.;=UI1p;8_*M*mqYRP0*sW\YPt%5Fd+Z*d1<`VW*d2&?+$sbCP2HSPud^%#p!@3$'ReBb'HThWn]*30lP/qrqsX<0>7pe_-)L!uo+Q9(8_hYScVCl[4W/A7/,%",m[?%+J$OS7VHe/YOjHB@@Us5@uU%KA0<h5!dU&uoE[1VJrhVVomIMQ2APKO_fLi]*%u]tI3Z0UFf\j%Qu%]>p"%a0Vn<q^$Z-i']K2K)%mZo_P7JcX>dnta[B'YXbB78KG*AeQ.2CuT,?Y!X1n90bqf=A^M.N;PBRS_fW3(^J"%c13<OKMDO=<#I%X9q-EoSsNGG.\@FT)i)l%&>NtZ.8_ic0GSP'*H,'6;),VCZ]`NB\*MK/[IObIU.m/qF@$*G\Knd`Api<5q'JO#%[M%ecpt'dHrm,dGK$k8;b-Iu^6*?t3us(H%9p-)-q5.*H&*5ktXaE'0P&JF@CBTt(`K?ob]]"sQ,c7Q+'DJei2gn0&=Hc4e8]&QA$NoprFoaL1Q#Z)i\&u/M9E2m=A\?'$DD8/]%S3]T`$e!+@`NkF9U>8Yc&I+YcELN0L%R_:6!lnqq(3,]r<pN5n.oJgK`C.Z7Fabau:fCC(AXoVK"Q-Y^EH\LB36ee;Ag$*FKK8iJ%0HC^D,'P=^2:!V%ZT*Fa6ln(!9\F8H_#13'&k:)[`o&^fLqJB=B6\^s8>15rj8&i8+ZcBHhmDqCDmXV<^dJ4mVOf0/+BJDrg.<1O%bXYC6V*Y+m>`]VL"I$`Q%XZ3oMP36qE/gqB<hKM)IcEt_OXH*J+u1M^ck/A-(jj<`E?lT_isuI4F0t<lLL*S'15blbfVQa"JECgh%FOWR1eer*=ocpA2*VSj?9p<!qe8NAT(EGt'-k:R??;J/#g^NJ94<QQ*at.kES:WN@/AgcANDiOjKW0pCe$6_i&R)E!%Jkrj<@sf?%N^=Sa49"!h<]4VVc3E%1_)eJM^jF90^+AYp&kiQm[0[*IiDm/OGaE^r:dIi"CN7c76I&#5`Jc^!k8M1S!5/)K9e.uK/akoMZ/H!;%#V-]tieijc!Ul+sZ5gK_in*b^p781=Hn[.ZD-J/GQ=SGp-Z`[*dV3fj8AK+dIG53+IV.aSfd+b44>O!$]LoK+$`)`]i]0^S.m)Dd%UdJ7AL0$*uDGlu4V'EEl"#`Mq>=#,K!XUI1<gIQ%QBBTo6(7O*=;k3)W=F=<iuml::3Ct0g06[_o!)]D2B&[eA]h@NYkfp>/"0lL%.=EsbqOWr1(<7h5Dd@EJ+eYiuh9j-`6A1NgIU*Q^gdnKuX3e52Un3g;<ZL%3&B$:p64h1R0Fk+#$o-.&5`?B&J],\=dT\`nPj(.e%:Lc)+"IKmG&*u7p;0i^6QTh:u]m+.*3DF`6HGi@*):mi!e9=ld+KWKN;@o2sLj)N_%7YAGK7neIC&5F(l#kj.e"-qY9XtUlRaeiL%a;j$T\(Ro#gVb:p0(\.uFcD@m&RCN:E7[JRP'1QFUD^nJ+A<G]=p7)<#XDWd7oHacP1Nn[fiEn7iE3A`UD#WhAs-:3iUmdjH9VLb%;#Zc03Z0b?MEd),DkM_kG-QIG+U4RG9GGN!_YmK>0u\[!BuFnOC(OVX(fd.@N96kp0L1>*r9Q?UU9['N?`nZ$]u,426Iq=@&oJ_K%\@o8)A6"k88YL8(0jT\"A7R`9">%$V*>SDn)c4hLZL-rCAp7^@/sO&"e"=p1lqtha)icab*4cE3Z$9R+$OB81$R.suS!U!Pbi_Ee%%]b2si3^3ocQu9,<?m!(N+,Y/b<m`50pu!nXUT2$g4]Re%.m&J."iHbF$;V]mF6m/_@2Go.(<Ln:.@nb/'MHBn3k4r6;q9u]<@C)%dT:Q`(<UcJneVXB6U*tjf4"GZ>'l2O8Dn4g)0VYB-mBirdW*Y\=\1A<LSp#=`@,OLfgH.QfK4K,7Sen6+(@qhrmULSL]h4F6TO*q%HuQ4d1I.K)6c@V0%\FtQU^KB"^0h4R[SSt,TpN\2_ei1)@>n'`+s_-W"'I"FBa*aWEjU*D:/%Qa#c$\p%gl4c)\H\;W5Jo7e-D7T%+S"SU\^gbT]F7m3-;)(<"\=;,[j`hdY/M/,CJJfpEmJ!q1fG>\/BqgcaIF&L/F-3p[B*Yrklqa9:V`d^+&se6m?uP:_@Sbk]>hF6%Kl2mQ7LJd'%i&.3Qkmfp:;sM5PWPmg;gqqd?/Z4#?F?oV$LA!<AY=<QL!l&\2g*V+?cJrXa"7)L(m+3On7Zln'Wa$ab-U]Dh56J%%FAfX!1[UmIq?l2NSW5H]igEiCHDUirSgj)hXK%j??:Fu8)`%Rt]"Lj>KsW#t<NNFc%TK5`V[\ll^Y2I%oWA_JhC/t%"d-meS^J*G%k@Ogi44eg6jPUV.5]KO</30Wl-`Aj,luqqR6K_S9'Pe_aD]Ddn&6[iMS5u:BV\MhL.Ja?'KdG0OB>6#YVmtM/o0TleBDIa"lL;\d%S6d=I&]6H6_6aJNTs14;UP`%PUN9;FZFLh-1Y&OZ7H[,+XhjC`6Js4CUg-><R"m-[OBa]XWY43d['IQI-k9F5OHi4'*6)0dG$KUD%XNo&1o'OBrF!O9tDnmZ$%Y.Y7UZd(89j02[eT)8UZm)b47O1jIap-;Uk[_`R]i!,V6'al\7YX?P,(W2<ZJpJ!&D<0p3!pf(L?WQ=%?#)TMTk-'`C2n<PJ1hpB,RbSm]V\$fE_U<a^qMLkb^Eo1&;FD/0GZM&NtT7(&VCIS8<&Sr`-jMQI_j*=5_OF4%56?<A(m`mjOG0b%AoJ7,H]R\G*(3*C+^go2jk@0g<EA)g/YpA]^peXAg!hQ>K+BX`^&d)iD!)JoS[-,9JBhb[DgtL@)?:pf!2H43!ulI$cS;DM0nb*:%GdJ5u17k:o!I`A=&bQ;OGL[sP[#',N"78,]>f9\tL1[NSI)coN?ma]MJj\O"Q'3sqbSGMWE!3u2K-(MTh&EFSo;"'@neIOVJP/K9%[MUf@c**\nc/VA;5b\;mUiUB6`rOeZ1464V0>e(K0Gt9VVT!AV)+eXd^+kGWJnK_J<PB#'M#Hg(1BO!)gZ^c0'u><hAQ;S]>X%`3%62_(k5^RYWnL?<O.tFOL=J`D7NKEiVG=2D.)?^[HV\q^"0UaZ5]PC#_d)40Z>)@3,LgZ3g@A_t?b(5#'1%^447c"^/:uuWJ[sZsI%M"[:s9h2n<J8+(:@9#"9aO6=b4D'rid59:.4Jm,aV>:D<)g",U0T_+;JMCWT21qM!ZtV6ZGbqN7q\N3T77+H5?lK#/F(90%L93io%6H0GIab$Rf9jJu:V\oG,>t5jSSS_R&A3h'g#X^ms!e?SeLC-MOLf4?1BO&PcebFFtn*4Is-NqcC%a(\9C1Rtd@=[fC0P5Q>/94LM%'HfCJkQ'k_5cY.s!*!T`"L5/bkOPusbaHW?T/SopoKsb1L)?u.!?qasO=kHrH*9qYR;s43YKT=o>I<%pMI:I<gOluhZjKAV5apZL%2b9:[Q\lN//j1q;_1q*#)4C%LRCZ<9j`+etq1"WI_qF+Q)pG=:DhG1I,"hCd2MggS)6RG;hi4=k4*!Fp:?*Q#nK"'JQV>n\d9e.#%(p!`E_@-GT+4?KUN:r!]Ggqc;5h1tOqRV>RGmL4??/(5nB?.$ToMgq7I17NU.NOdoc[HnC3$)U",o!*5D=*RL>r&e75`K*k&'faK%K06asg<Rl)7=0ItXR-(TCTlo2bpM/p?`TK[_8^Xk-RsG#)/Mp0">42C8Z]@X+ZRso>1a,TgK'V'G_6A3gf3hVdR2YP41)])aE/]?%4mgs(Zsg8g(I_VlWXB3S6lb1c+_8m]UC6WNS^j;>nhMl!?J@k+>$63)I8mt53Bo5SrPWHr]*<<h&nN0^%:Kk@9brfV;JicLJE,Gh%R0qVE=kC*6nW^DN*4^`Y$^Od9`W0I1Rhoe@JFJ9@!$RE35pg[(\=B;;Z?3C,ltC5j7cpGK=S%g_;1/)6_a+JST4$+/!Bq/""-s,/%0mPM7UeQZHL5B$<g+(J.2m=\\d_(SSLY2$+9Km6r#)PIg)4A_EiZ.#)F0p.u'4Ir)Q->ACM?UOM(G;2t4nf@#_'(?HOPX@X.mggC%j(qRi@V?G;^id.;74Yh.#>"&k!#E$:YqF+kQDf%g?1p9\IWbpZ(GnAq",T(AU';hg$-+>Xo0)"\@D,hi>19hZ.u.)4YK^I`.[F[m%A'XGMiA-qPE)be/EjeT_A5TT!'eYPh9[obf=Wrfj^Y*;6hmTd=KFZ8"i)Ypi_k^D=++")]b/ff]Lnkd>7LCb4pS0hV/Hp[L,$2>n%l9P/2C]Ye4GGlWA"F1fof=iHGDR5uk26CPtI9KoO8Z:MIn$qh'VEc#(C\G&9)^?MS+fU$sY02b_p6dT_KkM51l9=nV_%:FGkh:nP%Npo:1FJ0($Kur.QQIlTDd*Ohn\l.aJ6N[FDqIku4S/![N0\"g&Qdu_aW@c+NE#]8:]VQ`-\.2+ALuS$4IY'=aRGp613UU9db*`"Y%)cmWF%C3uf>2bpdH0tu<i<Et%LO]fq[13Q@YVSWlmBqU@k'V4.:ZD)&*PG4r"h#>Ng%T$h$/KqLQCm!#e),]8KBkQHY%H.6Ra_)k%VJ@oUkWAV/]]go32]Z%G9ZO@6$"U%U;954:[^,#VafRgee$7SK"fT$c6Y4jm9oGnoD^TiI4[%SB%Qjob5dcjm7Ub+pjZAo*8+X[S%k'#A8l`=rI*O>CM_0uI#$FrCgXog7+VU20H!]?%H7bMqR!#=kqB%OkiZ\(tALuAn1Mmtq\\)"2E0&$j]7?C-qD21<MC#lRF90kmb%24K"j^7f@)Mb@`D466q5E-\8b]?YDDaL7(9BYpLb]<25.D=AnKfSl=4[Luf_8)jidDV#]f>mI.QENmlJO1iMCZ5@i@6M!R;aV=+S%,\']*mfod.3<HW5pniR'!8k5:JSLAiiCi$bO@X.qn.i%G2"dYHrBaaL##4PZ!gO=9K=WlWV%o!&=4p?!qhad*3+<+"$N'>.]#_S&%s'Z@2%nbIX!HZidke-4,XNi.B&;<fPJkVR\a1R>ab(V*tS;mg,/-pYZ>Pg0U#r>uC#uckM;1q?SkEo^`a:q$+=a!t_73h7&oHL0"%07pEU7UktW_Q[g@gTqI25IXFh[`*&7B#<)`A@l!@f.]Fr,5#n)(fle[D%<U_g*MV*R+X$$k_/#$>6PI>Ai&$R;+ehd*AnZC$8Yn5%WWSmh]#&g45e9_!BtC0P!hck'6?b&&)`-mnF(gYW5frL!l];GgR?/3"!Q!t?_APHCG/?$Z<4WqAS1^q6O?-KeR-@fdV981;`GhT.%.h83>i6/WC^TF^]_,]h?I4F#'(&Un#((B1/%_H*lnp6eDV[\JZ>_OnoK@bB-&D9US06XU7'fgP)Nm&WYX+DHC<@GE^CW7*O1_o.>%bt+9#e'$m:A;c9(-]Q:t-O=@E'P,A1!`E[FD$<,4P4alD;`9FIEf1JF"D`c--1,Y(#&05+H@nN\-4Z549:&a70kI!+k#ENd:.E+o%K^A3a7[H(MSAJDS5JicQ#:D@l<k,VR)Au,bBfa\Z$"M5E;SdqGNPUuUI)fsSI,UfR:T%3+h1u%kN^I.u0TjPeXV1F<4X!YI.Es1k%K^\cSVb8o`/hePZRQP&inM(N_[bs5m!LPac8XmGtYF6^@V3;GP0VYchUIf';+*[p6UYr^U\9\>+OqBC9Z^j'Q!jiTX-<f59\GQl=%WiA#mX:a9[-+7_M))qjU2HkX7J3i[=2]3u:l9VHb#V(2&!-O32W#\j0K%T\!G+`rq731Y7@nq];c0dldGh98h;"g:8S59sS<gm!d%20Fs;8D.JfX5h'V5,Sn8`TeL[YdDH$OJgNC1*FT5bJLX.^^l5b#oN+?N'`8dpCFtmp8Zeh_AGg0Pe>2T#/K&6h.9.JO$O4u)(5E=%B'4"b-M7qm0'`Uk[dF(QRqgIr6=rg$Za;J:q`4+#cl$\(MS.,Y,K0V*T)fUp,O_s&h3s[i`aoR5q[A];)sgt)+XtGkhs@\T=3<_-%8DRpjFqc<-it&:iP0MLY('=rYcfG94lhV=W7"GC4`fc_kT\(h7Jhc6)qW&^:m-ScQ0H2HcLU'::Pg'8?"ZELHS@%hsXeXN[S57$U%e'.Mq%(*,lJ.9MWl-bb82T6.4B`oSRA*cnjVL5Slq4"c$SJJn7[T/rcOiqEWm0,7$dRChP;;qD+^/*A>CfE,9dRsjmX91j@<KVC2%So&1RXRR-ZQfkH,8X-TFp[Pt`kCafVRucU`KTJPNp/'q3CCo#&4%#T4=HWc['Zb.O4KM3OrM^QciZ-k:bHd7J]"Z;k\/q&F"(99:%-=XFG7"0H$$`+f[&s34FM/JOR'FCgMg*OX7Mh2`"p3#\;0uQZ1Aa;lT;[s1USO3LDNDlM4JCO'W4#J*Y.5!8ULdp1IhD:@HI&%Su%]jnEEM=sp_J`OT],aqb'h#65o1l-n"a:_UZG$If%D0$hGZM-'`+II9+]hPSoHlQRfZ;KlnM9h;V'"&Gk4@s4RPf3)qCJB.D1=g#1%N_!c4aD"D4/d>+Dm_.']#s`:V"C`ajf=AT+6L(gQ.?<0i$Ol:O_Epg2hm&"%KX4Cb(;\:Z)lSXV4Ri#Cm>6k4:'kn_]e:PG`o%iR%g'[R3\hd&V'rgZ&=<:K0WJl5uqtLfPjGGV8R?!(dP80O7;m8_J9N*NT(Y8#XHkhL&AS"9=VUu-V7$Y%%bA`NBq6mKjI"U@oN6X@?%h29fbU_@$W:3A&KP)p=RW*#(.TI834Xe%h3QA)?d1E?7/0ckToZ,T!&qcF&<liXBNK!N<Yd$9N_YH\T\SaThV^@B>@i%NRp`:e'&%`hl:+NdOg%7Qq_A76\4+f>]Y#'pG_\I'+Sf>Y`Vn$8N_f#mWZ`D5'F6jC@p&[sJN,@TM_Ch$SaGU%>g]@L>Faa="++/>2DGo4Tm'%F:ukhC0LG7;Wn8NTQ"*<D"buLJ[@!!`XlY:#pVKbn%_e4+GBiE;M3o6fR,'^V7aV9kTkVuWT).<;<b?%=JJ7b'B)3(<9YSiL1E[E%XL8Lg-nt"`l);F3@6dcRT(ql]La;8SETOVuE:]`;,HrYMCtjuNPZafh7$651P(sI43_PSu[UQca=_s$?"Cd@IXYGJ[DQ`BX[#pGs%0nsMe%r.(IjA<l2A'`.+0G):*l!k+]\OH:^UbRU?8d)?;&B;N0a^PZuZFPqs@gGA=f9eo">L[.@KaQ7q65:_*TrI1:(G*+]>R.6(%^.2R:NB77^jHsI1TZjobhr(hkaj!."Q[iBP==e%n[j;)J'sc7[-ao#WFFh$nReP'E`la%Yq]Qnm>D^%)A7"Ni&B7NPcIQ!*%M<L<%N6(3.P#5Ftk,IrOHY,<MTU5PWl)6jToNI`-;NOVJ!je*]L.oG1_:Hp"98c?$Ajn`eg/$jYDQ]\r4Ng-f)KT).Wu@O#Vg-Ts5d[.L%KMV]fE-_e"ZF4$)UA[.^s!BC+[85_@h6G/_FH.[W0QB1fr3n2"=-9OI;<bBI.sisY<ltsZq+*?t&?A8L0HaDO)+;]['QTT1@r--b%jkM%bSYnbO?t/V12bpI/![7E0\2+lCLEk&155$sK'MHJgV1MB>0sYnPSm#Rrq2bo>:5_5`Q2F4WU5[5BDBC,nFGOueiW-RlS1cWk%I<+ItO/45"dn.Y;,31JXGZ5U'&pL:QJ9*M"Gpd16)BhXmZr)r@O6,gedma&#odD"f(9NC46&MloA5]m),7qaed].YLoL7dF-8dDp%fI&,&WJdjIX6j)@C>]jU>J[_:Camu&<I5WC8B-@\(%-.]Pfu9jUqX!@GtbWD1@3\T@scp>TgIcEb9q).a4MFO)/F'Oo'AJT`h#Y?%Oq0!r:bS!A\=&@O-k%XbgYO/TTNi]V.(e*(PfY4X2B"iBC2a*Kbg$m5Hte8pI!0OfM-?!eM:>qdi%$t@6-k!`@=hu3SZPsH>>.So%3HiX5H`g0&`8p#aU]r9W8/4e,8;<$u,VBJ^&+M>YdT,NI$+.%5p/3CD2mo.[I#CsdHAg9\knXRgGn\qPc[8ql:I=#(0!!aF-UQr%%QhWrt9Mbd)'r_e&>/$X:=n"b[RfbMK$IhBWHT)0X6:egbE=kOs`O:dpkS)jV[d#/9Xp-:(;?IU:CPERh:akL99o,NQ3C\SRO^/oR%5k_N_K<#W4OMm]*X%W^M+UZ^,@-=6j;$9sKV&Z38N`cNC64m*N8Vp7Hn?R0M17l]mC5u*_S>)UlGc5I%Ac4Z\'!JgWaE<it>na9A%8<_QdW1fEM/]%MSFkb("M\[],q$&R:^Ot]C]oM?EFVId-TQ6-]QmrG/?0."jc6LNC=F:Pm6h4aa7/^s&gC"n25V[sf;-h;a'[c"2%.PdcA$550=+"+*h><0ekX+l&0foSq3S++IpQno@!AGs$4Jl1&!ME0DrATc\!MO=gBOX\mTNEis"[-I2?l+U5D.M_2(5G_gLJ;FGq%]IKGB4M=TIU=jTU*fWjsiKG$]>WaChNqsS3D`3p*\jWoB!GAM+<%t-8+o)54-bL4ao!ImEN\kB:QAPpr[#.2BWE2hc&'ls9[PB4O%A9p-IYOFEGA>AYB]kIgG(8rf5BlIn`R+\HT?F?/<$2*k*/gr`q;F*n"OO?7tV4clLRi1$u5tNccA&hf^'U1.N.4@2A\=b)YN_`Aa%5tT?L6:mbR:Qbb"E2b5,I-FT:+k;cE"=V[&8j,a@\acV*P3PUo=.Zbr;aEtX_75`cU_]1G=Ar%:n/tesj<Oj\"dCN0Q4Zf*77lWO%#PONX77e!7+fhD<Pa&c)-utG#9"+>S.n\CGb7u=mq+MML$SpDK1mshEO<p>.P#u(/[9*cPD)<(VNt\WM0q>f"R8[KKQltI1Yl998%/l=TFN05a-Gnj_e3m1B2&D+J>,XaL;*CMc`.TfokGNV,l]bH('>b]Qel`?>.e*t4Z*PmJ0)WWFQ49rSYq:2o0dLiC^PcB3:R7_2+%^2n-AQNC\_U_9=n!@)-JAZd*J.JFQ&L;+lK'JVlcB.d9Po=^\\/7/r67(Pu.'.GQU6g2rGpSaB/Q2^WEb@b@fOm$>WjA8C<;g]_B%D*#XE)l1g%d1sj1+L>.49m0st2sc'9fur/8OpV1;=->*X*@M%3S?L"u\`>*7S?*u'Oc0/=?k9"4fN:&1b]W@@?q@oJ=NX3M.=&l-%NGrR?R,(lmoITU+i:=L_DmhOUXj4qD8-qQC;^bdPiO:;(Gmk1)VgOD9M,$i:%>LVF7LBR8P_9-")1E9no9-f0Z,m<=%]"gI,sU*0%H=o&hh.[-<[R'\kG<0KC-j?62'Pp[-)s\QXNs%pR6p<6j[aHWP;le%PmZtPin!ige)&m/-]9%K7,"U]+[Tc:.):bYP%9%sRH?+aZ%7M:'8I>lS]]\orV,U+\q<0:Jm'[opuZ@H?5jnCp"L5S]/o^,O_Y"L"[]L]mR$F4W&5L5;9P./>?MSLQ.-!<uuKQoA1Od)uiBRoVA%&:^=;*3N%V7E1?\SeOGUM@Oph2H!FWR'U6rU?cjV5&7Z-<,u$8=jT>,Dc$s=EOac%4OJ$[`"_u:/M[NnB^b<s_M1N\QP3tob&'3f%LBh7\<hr6:S/,OKE:@*D]2sGqKfid"M[?@!7ZJ/s7Ej-%Yb[Wn;@ID'SCls?p3"4\G_>Q[/kD*sancIdG@:Yb`&fbCK^G(<J&9NW%p0TiIQPm.^_F:b6K^[FEkB&@cJrLqn[snK2Ul)1t9;NBS1!Et?1:i]ea2h4p@.m0G8h7hp<6BT#>q0s]e2P"G'4LTTGRUQATL!C5%?P9Q]7RsTtQhB]33g:AOLHU;r<CBs2_TJgZnnN5T;_&LQah?1YBLF%=f>\@pPM.39nQ@?2eL@4sf!'sSK;;5'O@d&eWeB`m5dIMd%P\MXF\Ac4s&t"-j.GZ/4cjTsYKut>SdkH2=KS\CI<(eCBJfIG;?=Z7%9sGQ]hPYC;^haY=4Bi(jnJq\b.B^2#Qqd=MT!LISW1P:@%(ciI(j1IjN'1o<"Kjmsf:mWpj]M;ukgbs@=d/:K_858*4i>#5,>7p_@@#[P4Xe^s#Jb#!+q-<'79877:s4HD'c/]`bjBBPm8=5Op%\Va'Nc.&(\R>6LFf`segbDnC,&m^!1V$H)SHrl(j?Rg?L7`oijR,j$sQ8YO"&"LY$MKDm,aqZq)Mc&4GnbKGSLbr'r942ouC*AL>%^5W03H7G/r$<g?VJ4MR@Ou/pJ57T$2&\pG@k+M<ICPfpe1OMmQRZF;NX)bLVI$_q);,+'niE4_f^a\hZ`1k*=fnPN-\IpX]0ki,j%ce7e@A#cYm7HER;j'OY&b+N"f$'p-IW!_]GSUb0nJ2ureaiP;\,(-@t6oOXh(W1=@Lo`nkR/(!!ZQE<F+ik002+Be)m(I9fGXaZM%0gOAJBrl]8gT69lPok%+Qt#00A8LVJa:Gfo6o!'XFYTHT@cUUd)YjQS%gol>;bdKh7uo:M4h.aJ(s'#W@dF:Jl6;I)V&CWhYu<!?%0jHn!JEkLLMG-N?a@`3[&QJ%(<OQ.\h97c.;2;e'ZL>%EU+S"$-sq^KYTbMH#"0(c1En&"aXp/F\jXR"P[;kMX@Ss692l<c'(FkV%B!2m5P3;CVF[mdr^YRULW`RsUNd]F^8@9mZ^G\1E>jRbp_UHg]D)GF:!6:UA2%RmVDTq@K4V8o$Sm:^b/<qg4LnJ8.</g.SAekhW%obem"[ko*_QkX^X3qB7@?@?*Gn/+P>kdHbW20#Fe!]4h2YV`6*;&T,pf5V6`UcQ"l%rCTGdK.qOfEH%<3'TJ8CJBgghAC8"ON^YN%3*\f)[MfCu;u&__XA/IK?edp,oSFDigM$R4V5eMB:c1uMAW>/(-5@LQ`D&b\i293BWhe$%>`.=V7cT#1m>Yj;%dMf&<3RjQ*)999%Xi`q`@?YjFX.05J.]6`Yje*jaD50cYCRoD'9%-WX<,I?V)dATFFdW&W`o6d=[e4`>LX5X1A;L\(-CpK'%VYGtoPH+F$'JHQTMD:]%"-q>JAk\t@:^/P`2N@pYH8C3C[<JBe:qtUmc,;XJFXT9%U?ES]S`>*p7d6QUTMiL$3[cM7T:2iRV]o.*'Wb.m(!B4)9/jj[l/9Sr%7&$^t5k.+A)bZ/:YB-ho6'5JK?uD3(Q*]8'9*Y^XBUua%lMG2%@aR5^7l4D)94+R+RqNgAiASeS&VYh:X*ceUBH7eFN.Y0@#EeU%%X.>,I[8X<(G*!8D@]O\;[]F5AD!%gB)F2eI"!k91qmiQ/1&pI*Y:da/fDW(HY#AR2<!$X&7WBS$;I,*125_]99')4YF"j+e5"bfK%QgY;U$935ZD,7[#bS9JEMLd-?;MFt/b42;toR-5>jDLmrWg&.X:`U5F+Xu/Y*gWu\#+3ZJ6/3XJ;#N-X.MrsP1?G.G'UiNKe`Ahs%NpF;c>.h(kX`2*'4B5];jB8H%[um]$)Y*=X#@r.F160en`'dK$R;M-,=kpF7_qV5;s(c+5IN*QLq^)8mnVIpS`Pq/h?Z4fto_e+R%btk+dT:c/8k/-`Wm@>oV^MJ@lIp%$pC%Lq_SPP^_TAT#5#7*JURkHCsrOG,gJ**jR)Z~>%AI9_PrivateDataEnd